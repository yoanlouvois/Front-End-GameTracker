/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { Pageable } from '../../models/pageable';
import { PageGame } from '../../models/page-game';

export interface GetGamesWithFilters$Params {
  name: string;
  category: 'ACTION' | 'ADVENTURE' | 'ARCADE' | 'BOARD' | 'CARD' | 'CASINO';
  difficulty: 'EASY' | 'MEDIUM' | 'HARD';
  minRating: number;
  minAge: number;
  pageable: Pageable;
}

export function getGamesWithFilters(http: HttpClient, rootUrl: string, params: GetGamesWithFilters$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGame>> {
  const rb = new RequestBuilder(rootUrl, getGamesWithFilters.PATH, 'get');
  if (params) {
    rb.query('name', params.name, {});
    rb.query('category', params.category, {});
    rb.query('difficulty', params.difficulty, {});
    rb.query('minRating', params.minRating, {});
    rb.query('minAge', params.minAge, {});
    rb.query('pageable', params.pageable, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PageGame>;
    })
  );
}

getGamesWithFilters.PATH = '/gametracker/v1/game/filters';
