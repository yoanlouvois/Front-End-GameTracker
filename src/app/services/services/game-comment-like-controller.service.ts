/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCommentLike } from '../fn/game-comment-like-controller/add-comment-like';
import { AddCommentLike$Params } from '../fn/game-comment-like-controller/add-comment-like';
import { countLikesByUser } from '../fn/game-comment-like-controller/count-likes-by-user';
import { CountLikesByUser$Params } from '../fn/game-comment-like-controller/count-likes-by-user';
import { GameCommentLikeDto } from '../models/game-comment-like-dto';
import { getAllLikes } from '../fn/game-comment-like-controller/get-all-likes';
import { GetAllLikes$Params } from '../fn/game-comment-like-controller/get-all-likes';
import { getLikeById } from '../fn/game-comment-like-controller/get-like-by-id';
import { GetLikeById$Params } from '../fn/game-comment-like-controller/get-like-by-id';
import { getLikeCountForComment } from '../fn/game-comment-like-controller/get-like-count-for-comment';
import { GetLikeCountForComment$Params } from '../fn/game-comment-like-controller/get-like-count-for-comment';
import { getLikesByUser } from '../fn/game-comment-like-controller/get-likes-by-user';
import { GetLikesByUser$Params } from '../fn/game-comment-like-controller/get-likes-by-user';
import { getLikesForComment } from '../fn/game-comment-like-controller/get-likes-for-comment';
import { GetLikesForComment$Params } from '../fn/game-comment-like-controller/get-likes-for-comment';
import { getMostLikedComments } from '../fn/game-comment-like-controller/get-most-liked-comments';
import { GetMostLikedComments$Params } from '../fn/game-comment-like-controller/get-most-liked-comments';
import { getRecentLikes } from '../fn/game-comment-like-controller/get-recent-likes';
import { GetRecentLikes$Params } from '../fn/game-comment-like-controller/get-recent-likes';
import { getUsersWhoLikedComment } from '../fn/game-comment-like-controller/get-users-who-liked-comment';
import { GetUsersWhoLikedComment$Params } from '../fn/game-comment-like-controller/get-users-who-liked-comment';
import { PageGameCommentLikeDto } from '../models/page-game-comment-like-dto';
import { removeLike } from '../fn/game-comment-like-controller/remove-like';
import { RemoveLike$Params } from '../fn/game-comment-like-controller/remove-like';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class GameCommentLikeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addCommentLike()` */
  static readonly AddCommentLikePath = '/gametracker/v1/game-comment-likes/toggle/{userId}/{commentId}';

  /**
   * Créer un commentaire like .
   *
   * Créer un commentaire like
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCommentLike()` instead.
   *
   * This method doesn't expect any request body.
   */
  addCommentLike$Response(params: AddCommentLike$Params, context?: HttpContext): Observable<StrictHttpResponse<GameCommentLikeDto>> {
    return addCommentLike(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer un commentaire like .
   *
   * Créer un commentaire like
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCommentLike$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addCommentLike(params: AddCommentLike$Params, context?: HttpContext): Observable<GameCommentLikeDto> {
    return this.addCommentLike$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameCommentLikeDto>): GameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `getLikeById()` */
  static readonly GetLikeByIdPath = '/gametracker/v1/game-comment-likes/{likeId}';

  /**
   * Récupérer un commentaire like par son ID.
   *
   * Récupérer un commentaire like par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLikeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeById$Response(params: GetLikeById$Params, context?: HttpContext): Observable<StrictHttpResponse<GameCommentLikeDto>> {
    return getLikeById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un commentaire like par son ID.
   *
   * Récupérer un commentaire like par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLikeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeById(params: GetLikeById$Params, context?: HttpContext): Observable<GameCommentLikeDto> {
    return this.getLikeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameCommentLikeDto>): GameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `getLikesByUser()` */
  static readonly GetLikesByUserPath = '/gametracker/v1/game-comment-likes/user/{userId}';

  /**
   * Récupérer les likes d'un utilisateur.
   *
   * Récupérer les likes d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLikesByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikesByUser$Response(params: GetLikesByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameCommentLikeDto>> {
    return getLikesByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les likes d'un utilisateur.
   *
   * Récupérer les likes d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLikesByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikesByUser(params: GetLikesByUser$Params, context?: HttpContext): Observable<PageGameCommentLikeDto> {
    return this.getLikesByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameCommentLikeDto>): PageGameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `countLikesByUser()` */
  static readonly CountLikesByUserPath = '/gametracker/v1/game-comment-likes/user/{userId}/count';

  /**
   * Récupérer le nombre de likes d'un utilisateur.
   *
   * Récupérer le nombre de likes d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countLikesByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countLikesByUser$Response(params: CountLikesByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countLikesByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le nombre de likes d'un utilisateur.
   *
   * Récupérer le nombre de likes d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countLikesByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countLikesByUser(params: CountLikesByUser$Params, context?: HttpContext): Observable<number> {
    return this.countLikesByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getRecentLikes()` */
  static readonly GetRecentLikesPath = '/gametracker/v1/game-comment-likes/recent';

  /**
   * Récupérer les likes récents.
   *
   * Récupérer les likes récents
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentLikes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentLikes$Response(params: GetRecentLikes$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameCommentLikeDto>> {
    return getRecentLikes(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les likes récents.
   *
   * Récupérer les likes récents
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentLikes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentLikes(params: GetRecentLikes$Params, context?: HttpContext): Observable<PageGameCommentLikeDto> {
    return this.getRecentLikes$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameCommentLikeDto>): PageGameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `getMostLikedComments()` */
  static readonly GetMostLikedCommentsPath = '/gametracker/v1/game-comment-likes/most-liked/{limit}';

  /**
   * Récupérer les commentaires les plus aimés.
   *
   * Récupérer les commentaires les plus aimés
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostLikedComments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostLikedComments$Response(params: GetMostLikedComments$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getMostLikedComments(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les commentaires les plus aimés.
   *
   * Récupérer les commentaires les plus aimés
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostLikedComments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostLikedComments(params: GetMostLikedComments$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getMostLikedComments$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getLikeCountForComment()` */
  static readonly GetLikeCountForCommentPath = '/gametracker/v1/game-comment-likes/count/{commentId}';

  /**
   * Récupérer le nombre de likes d'un commentaire.
   *
   * Récupérer le nombre de likes d'un commentaire
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLikeCountForComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeCountForComment$Response(params: GetLikeCountForComment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getLikeCountForComment(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le nombre de likes d'un commentaire.
   *
   * Récupérer le nombre de likes d'un commentaire
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLikeCountForComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeCountForComment(params: GetLikeCountForComment$Params, context?: HttpContext): Observable<number> {
    return this.getLikeCountForComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getLikesForComment()` */
  static readonly GetLikesForCommentPath = '/gametracker/v1/game-comment-likes/comment/{commentId}';

  /**
   * Récupérer les likes d'un commentaire.
   *
   * Récupérer les likes d'un commentaire
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLikesForComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikesForComment$Response(params: GetLikesForComment$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameCommentLikeDto>> {
    return getLikesForComment(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les likes d'un commentaire.
   *
   * Récupérer les likes d'un commentaire
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLikesForComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikesForComment(params: GetLikesForComment$Params, context?: HttpContext): Observable<PageGameCommentLikeDto> {
    return this.getLikesForComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameCommentLikeDto>): PageGameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `getUsersWhoLikedComment()` */
  static readonly GetUsersWhoLikedCommentPath = '/gametracker/v1/game-comment-likes/comment/{commentId}/users';

  /**
   * Récupérer les utilisateurs qui ont aimé un commentaire.
   *
   * Récupérer les utilisateurs qui ont aimé un commentaire
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersWhoLikedComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersWhoLikedComment$Response(params: GetUsersWhoLikedComment$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getUsersWhoLikedComment(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les utilisateurs qui ont aimé un commentaire.
   *
   * Récupérer les utilisateurs qui ont aimé un commentaire
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersWhoLikedComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersWhoLikedComment(params: GetUsersWhoLikedComment$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getUsersWhoLikedComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getAllLikes()` */
  static readonly GetAllLikesPath = '/gametracker/v1/game-comment-likes/admin/all';

  /**
   * Récupérer tous les likes.
   *
   * Récupérer tous les likes
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllLikes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllLikes$Response(params: GetAllLikes$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameCommentLikeDto>> {
    return getAllLikes(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer tous les likes.
   *
   * Récupérer tous les likes
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllLikes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllLikes(params: GetAllLikes$Params, context?: HttpContext): Observable<PageGameCommentLikeDto> {
    return this.getAllLikes$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameCommentLikeDto>): PageGameCommentLikeDto => r.body)
    );
  }

  /** Path part for operation `removeLike()` */
  static readonly RemoveLikePath = '/gametracker/v1/game-comment-likes/remove/{likeId}';

  /**
   * Supprimer un commentaire like.
   *
   * Supprimer un commentaire like
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeLike()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeLike$Response(params: RemoveLike$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeLike(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un commentaire like.
   *
   * Supprimer un commentaire like
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeLike$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeLike(params: RemoveLike$Params, context?: HttpContext): Observable<void> {
    return this.removeLike$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
