/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignReportToAdmin } from '../fn/report-controller/assign-report-to-admin';
import { AssignReportToAdmin$Params } from '../fn/report-controller/assign-report-to-admin';
import { changeReportStatus } from '../fn/report-controller/change-report-status';
import { ChangeReportStatus$Params } from '../fn/report-controller/change-report-status';
import { createReport } from '../fn/report-controller/create-report';
import { CreateReport$Params } from '../fn/report-controller/create-report';
import { deleteReport } from '../fn/report-controller/delete-report';
import { DeleteReport$Params } from '../fn/report-controller/delete-report';
import { getReportById } from '../fn/report-controller/get-report-by-id';
import { GetReportById$Params } from '../fn/report-controller/get-report-by-id';
import { getReportHistory } from '../fn/report-controller/get-report-history';
import { GetReportHistory$Params } from '../fn/report-controller/get-report-history';
import { getReportsByStatus } from '../fn/report-controller/get-reports-by-status';
import { GetReportsByStatus$Params } from '../fn/report-controller/get-reports-by-status';
import { getReportsByType } from '../fn/report-controller/get-reports-by-type';
import { GetReportsByType$Params } from '../fn/report-controller/get-reports-by-type';
import { getUnresolvedReports } from '../fn/report-controller/get-unresolved-reports';
import { GetUnresolvedReports$Params } from '../fn/report-controller/get-unresolved-reports';
import { getUserReports } from '../fn/report-controller/get-user-reports';
import { GetUserReports$Params } from '../fn/report-controller/get-user-reports';
import { hasPreviousReportsAgainstUser } from '../fn/report-controller/has-previous-reports-against-user';
import { HasPreviousReportsAgainstUser$Params } from '../fn/report-controller/has-previous-reports-against-user';
import { isContentAlreadyReported } from '../fn/report-controller/is-content-already-reported';
import { IsContentAlreadyReported$Params } from '../fn/report-controller/is-content-already-reported';
import { PageReportDto } from '../models/page-report-dto';
import { ReportDto } from '../models/report-dto';
import { resolveReport } from '../fn/report-controller/resolve-report';
import { ResolveReport$Params } from '../fn/report-controller/resolve-report';
import { updateReportDetails } from '../fn/report-controller/update-report-details';
import { UpdateReportDetails$Params } from '../fn/report-controller/update-report-details';

@Injectable({ providedIn: 'root' })
export class ReportControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateReportDetails()` */
  static readonly UpdateReportDetailsPath = '/gametracker/v1/report/{reportId}/update';

  /**
   * Mettre à jour un rapport.
   *
   * Mettre à jour un rapport
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateReportDetails()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReportDetails$Response(params: UpdateReportDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return updateReportDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour un rapport.
   *
   * Mettre à jour un rapport
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateReportDetails$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateReportDetails(params: UpdateReportDetails$Params, context?: HttpContext): Observable<ReportDto> {
    return this.updateReportDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `resolveReport()` */
  static readonly ResolveReportPath = '/gametracker/v1/report/{reportId}/resolve';

  /**
   * Résoudre un rapport.
   *
   * Résoudre un rapport
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resolveReport()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resolveReport$Response(params: ResolveReport$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return resolveReport(this.http, this.rootUrl, params, context);
  }

  /**
   * Résoudre un rapport.
   *
   * Résoudre un rapport
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resolveReport$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resolveReport(params: ResolveReport$Params, context?: HttpContext): Observable<ReportDto> {
    return this.resolveReport$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `changeReportStatus()` */
  static readonly ChangeReportStatusPath = '/gametracker/v1/report/{reportId}/changeStatus';

  /**
   * Changer le statut d'un rapport.
   *
   * Changer le statut d'un rapport
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeReportStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeReportStatus$Response(params: ChangeReportStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return changeReportStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Changer le statut d'un rapport.
   *
   * Changer le statut d'un rapport
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeReportStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeReportStatus(params: ChangeReportStatus$Params, context?: HttpContext): Observable<ReportDto> {
    return this.changeReportStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `assignReportToAdmin()` */
  static readonly AssignReportToAdminPath = '/gametracker/v1/report/{reportId}/assign';

  /**
   * Assigner un rapport à un administrateur.
   *
   * Assigner un rapport à un administrateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignReportToAdmin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignReportToAdmin$Response(params: AssignReportToAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return assignReportToAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * Assigner un rapport à un administrateur.
   *
   * Assigner un rapport à un administrateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignReportToAdmin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignReportToAdmin(params: AssignReportToAdmin$Params, context?: HttpContext): Observable<ReportDto> {
    return this.assignReportToAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `createReport()` */
  static readonly CreateReportPath = '/gametracker/v1/report/create';

  /**
   * Créer un rapport.
   *
   * Créer un rapport
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createReport()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReport$Response(params: CreateReport$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return createReport(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer un rapport.
   *
   * Créer un rapport
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createReport$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createReport(params: CreateReport$Params, context?: HttpContext): Observable<ReportDto> {
    return this.createReport$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `getReportById()` */
  static readonly GetReportByIdPath = '/gametracker/v1/report/{reportId}';

  /**
   * Récupérer un rapport par son ID.
   *
   * Récupérer un rapport par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportById$Response(params: GetReportById$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportDto>> {
    return getReportById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un rapport par son ID.
   *
   * Récupérer un rapport par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportById(params: GetReportById$Params, context?: HttpContext): Observable<ReportDto> {
    return this.getReportById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportDto>): ReportDto => r.body)
    );
  }

  /** Path part for operation `deleteReport()` */
  static readonly DeleteReportPath = '/gametracker/v1/report/{reportId}';

  /**
   * Supprimer un rapport.
   *
   * Supprimer un rapport
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReport()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReport$Response(params: DeleteReport$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteReport(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un rapport.
   *
   * Supprimer un rapport
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReport$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReport(params: DeleteReport$Params, context?: HttpContext): Observable<void> {
    return this.deleteReport$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getReportHistory()` */
  static readonly GetReportHistoryPath = '/gametracker/v1/report/{contentId}/{type}/history';

  /**
   * Récupérer l'historique des rapports pour un contenu.
   *
   * Récupérer l'historique des rapports pour un contenu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportHistory$Response(params: GetReportHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageReportDto>> {
    return getReportHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer l'historique des rapports pour un contenu.
   *
   * Récupérer l'historique des rapports pour un contenu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportHistory(params: GetReportHistory$Params, context?: HttpContext): Observable<PageReportDto> {
    return this.getReportHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageReportDto>): PageReportDto => r.body)
    );
  }

  /** Path part for operation `getUserReports()` */
  static readonly GetUserReportsPath = '/gametracker/v1/report/user/{userId}';

  /**
   * Récupérer les rapports d'un utilisateur.
   *
   * Récupérer les rapports d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserReports()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserReports$Response(params: GetUserReports$Params, context?: HttpContext): Observable<StrictHttpResponse<PageReportDto>> {
    return getUserReports(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les rapports d'un utilisateur.
   *
   * Récupérer les rapports d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserReports$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getUserReports(params: GetUserReports$Params, context?: HttpContext): Observable<PageReportDto> {
    return this.getUserReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageReportDto>): PageReportDto => r.body)
    );
  }

  /** Path part for operation `getUnresolvedReports()` */
  static readonly GetUnresolvedReportsPath = '/gametracker/v1/report/unresolved';

  /**
   * Récupérer les rapports non résolus.
   *
   * Récupérer les rapports non résolus
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnresolvedReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnresolvedReports$Response(params: GetUnresolvedReports$Params, context?: HttpContext): Observable<StrictHttpResponse<PageReportDto>> {
    return getUnresolvedReports(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les rapports non résolus.
   *
   * Récupérer les rapports non résolus
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnresolvedReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnresolvedReports(params: GetUnresolvedReports$Params, context?: HttpContext): Observable<PageReportDto> {
    return this.getUnresolvedReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageReportDto>): PageReportDto => r.body)
    );
  }

  /** Path part for operation `getReportsByType()` */
  static readonly GetReportsByTypePath = '/gametracker/v1/report/type/{type}';

  /**
   * Récupérer les rapports par type.
   *
   * Récupérer les rapports par type
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportsByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByType$Response(params: GetReportsByType$Params, context?: HttpContext): Observable<StrictHttpResponse<PageReportDto>> {
    return getReportsByType(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les rapports par type.
   *
   * Récupérer les rapports par type
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportsByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByType(params: GetReportsByType$Params, context?: HttpContext): Observable<PageReportDto> {
    return this.getReportsByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageReportDto>): PageReportDto => r.body)
    );
  }

  /** Path part for operation `getReportsByStatus()` */
  static readonly GetReportsByStatusPath = '/gametracker/v1/report/status/{status}';

  /**
   * Récupérer les rapports par statut.
   *
   * Récupérer les rapports par statut
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByStatus$Response(params: GetReportsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageReportDto>> {
    return getReportsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les rapports par statut.
   *
   * Récupérer les rapports par statut
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByStatus(params: GetReportsByStatus$Params, context?: HttpContext): Observable<PageReportDto> {
    return this.getReportsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageReportDto>): PageReportDto => r.body)
    );
  }

  /** Path part for operation `hasPreviousReportsAgainstUser()` */
  static readonly HasPreviousReportsAgainstUserPath = '/gametracker/v1/report/previous';

  /**
   * Vérifier si un utilisateur a déjà signalé un autre utilisateur.
   *
   * Vérifier si un utilisateur a déjà signalé un autre utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hasPreviousReportsAgainstUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hasPreviousReportsAgainstUser$Response(params: HasPreviousReportsAgainstUser$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return hasPreviousReportsAgainstUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un utilisateur a déjà signalé un autre utilisateur.
   *
   * Vérifier si un utilisateur a déjà signalé un autre utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hasPreviousReportsAgainstUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  hasPreviousReportsAgainstUser(params: HasPreviousReportsAgainstUser$Params, context?: HttpContext): Observable<boolean> {
    return this.hasPreviousReportsAgainstUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `isContentAlreadyReported()` */
  static readonly IsContentAlreadyReportedPath = '/gametracker/v1/report/content';

  /**
   * Vérifier si un contenu a déjà été signalé.
   *
   * Vérifier si un contenu a déjà été signalé
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isContentAlreadyReported()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  isContentAlreadyReported$Response(params: IsContentAlreadyReported$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isContentAlreadyReported(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un contenu a déjà été signalé.
   *
   * Vérifier si un contenu a déjà été signalé
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isContentAlreadyReported$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  isContentAlreadyReported(params: IsContentAlreadyReported$Params, context?: HttpContext): Observable<boolean> {
    return this.isContentAlreadyReported$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
