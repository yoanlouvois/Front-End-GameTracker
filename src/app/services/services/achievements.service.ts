/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AchievementDto } from '../models/achievement-dto';
import { countNumberAchievementsByType } from '../fn/achievements/count-number-achievements-by-type';
import { CountNumberAchievementsByType$Params } from '../fn/achievements/count-number-achievements-by-type';
import { createAchievement } from '../fn/achievements/create-achievement';
import { CreateAchievement$Params } from '../fn/achievements/create-achievement';
import { getAchievementById } from '../fn/achievements/get-achievement-by-id';
import { GetAchievementById$Params } from '../fn/achievements/get-achievement-by-id';
import { getAchievementsByDescriptionContaining } from '../fn/achievements/get-achievements-by-description-containing';
import { GetAchievementsByDescriptionContaining$Params } from '../fn/achievements/get-achievements-by-description-containing';
import { getAchievementsByRarity } from '../fn/achievements/get-achievements-by-rarity';
import { GetAchievementsByRarity$Params } from '../fn/achievements/get-achievements-by-rarity';
import { getAchievementsByType } from '../fn/achievements/get-achievements-by-type';
import { GetAchievementsByType$Params } from '../fn/achievements/get-achievements-by-type';
import { getActiveAchievements } from '../fn/achievements/get-active-achievements';
import { GetActiveAchievements$Params } from '../fn/achievements/get-active-achievements';
import { getAllAchievements } from '../fn/achievements/get-all-achievements';
import { GetAllAchievements$Params } from '../fn/achievements/get-all-achievements';
import { getSecretAchievements } from '../fn/achievements/get-secret-achievements';
import { GetSecretAchievements$Params } from '../fn/achievements/get-secret-achievements';
import { updateAchievement } from '../fn/achievements/update-achievement';
import { UpdateAchievement$Params } from '../fn/achievements/update-achievement';


/**
 * Operations related to achievements
 */
@Injectable({ providedIn: 'root' })
export class AchievementsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateAchievement()` */
  static readonly UpdateAchievementPath = '/gametracker/v1/achievements/update/{idAchievement}';

  /**
   * Modifie un achievement.
   *
   * Modifie un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAchievement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAchievement$Response(params: UpdateAchievement$Params, context?: HttpContext): Observable<StrictHttpResponse<AchievementDto>> {
    return updateAchievement(this.http, this.rootUrl, params, context);
  }

  /**
   * Modifie un achievement.
   *
   * Modifie un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAchievement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAchievement(params: UpdateAchievement$Params, context?: HttpContext): Observable<AchievementDto> {
    return this.updateAchievement$Response(params, context).pipe(
      map((r: StrictHttpResponse<AchievementDto>): AchievementDto => r.body)
    );
  }

  /** Path part for operation `createAchievement()` */
  static readonly CreateAchievementPath = '/gametracker/v1/achievements/create';

  /**
   * Enregistre un achievement.
   *
   * Enregistre un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAchievement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAchievement$Response(params: CreateAchievement$Params, context?: HttpContext): Observable<StrictHttpResponse<AchievementDto>> {
    return createAchievement(this.http, this.rootUrl, params, context);
  }

  /**
   * Enregistre un achievement.
   *
   * Enregistre un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAchievement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAchievement(params: CreateAchievement$Params, context?: HttpContext): Observable<AchievementDto> {
    return this.createAchievement$Response(params, context).pipe(
      map((r: StrictHttpResponse<AchievementDto>): AchievementDto => r.body)
    );
  }

  /** Path part for operation `getAchievementById()` */
  static readonly GetAchievementByIdPath = '/gametracker/v1/achievements/{idAchievement}';

  /**
   * Renvoie un achievement par son ID.
   *
   * Renvoie un achievement par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementById$Response(params: GetAchievementById$Params, context?: HttpContext): Observable<StrictHttpResponse<AchievementDto>> {
    return getAchievementById(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie un achievement par son ID.
   *
   * Renvoie un achievement par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementById(params: GetAchievementById$Params, context?: HttpContext): Observable<AchievementDto> {
    return this.getAchievementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AchievementDto>): AchievementDto => r.body)
    );
  }

  /** Path part for operation `getAchievementsByType()` */
  static readonly GetAchievementsByTypePath = '/gametracker/v1/achievements/type/{type}';

  /**
   * Renvoie la liste des achievements par type.
   *
   * Renvoie la liste des achievements par type
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementsByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByType$Response(params: GetAchievementsByType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getAchievementsByType(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements par type.
   *
   * Renvoie la liste des achievements par type
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementsByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByType(params: GetAchievementsByType$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getAchievementsByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `getSecretAchievements()` */
  static readonly GetSecretAchievementsPath = '/gametracker/v1/achievements/secrets';

  /**
   * Renvoie la liste des achievements secrets.
   *
   * Renvoie la liste des achievements secrets
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSecretAchievements()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSecretAchievements$Response(params?: GetSecretAchievements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getSecretAchievements(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements secrets.
   *
   * Renvoie la liste des achievements secrets
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSecretAchievements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSecretAchievements(params?: GetSecretAchievements$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getSecretAchievements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `getAchievementsByRarity()` */
  static readonly GetAchievementsByRarityPath = '/gametracker/v1/achievements/rarity/{rarity}';

  /**
   * Renvoie la liste des achievements par rarété.
   *
   * Renvoie la liste des achievements par rarété
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementsByRarity()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByRarity$Response(params: GetAchievementsByRarity$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getAchievementsByRarity(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements par rarété.
   *
   * Renvoie la liste des achievements par rarété
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementsByRarity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByRarity(params: GetAchievementsByRarity$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getAchievementsByRarity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `getAchievementsByDescriptionContaining()` */
  static readonly GetAchievementsByDescriptionContainingPath = '/gametracker/v1/achievements/description/{keyword}';

  /**
   * Renvoie la liste des achievements contenant un mot clé dans la description.
   *
   * Renvoie la liste des achievements contenant un mot clé dans la description
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementsByDescriptionContaining()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByDescriptionContaining$Response(params: GetAchievementsByDescriptionContaining$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getAchievementsByDescriptionContaining(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements contenant un mot clé dans la description.
   *
   * Renvoie la liste des achievements contenant un mot clé dans la description
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementsByDescriptionContaining$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByDescriptionContaining(params: GetAchievementsByDescriptionContaining$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getAchievementsByDescriptionContaining$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `countNumberAchievementsByType()` */
  static readonly CountNumberAchievementsByTypePath = '/gametracker/v1/achievements/count';

  /**
   * Renvoie le nombre total d'achievements.
   *
   * Renvoie le nombre total d'achievements
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countNumberAchievementsByType()` instead.
   *
   * This method doesn't expect any request body.
   */
  countNumberAchievementsByType$Response(params?: CountNumberAchievementsByType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return countNumberAchievementsByType(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le nombre total d'achievements.
   *
   * Renvoie le nombre total d'achievements
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countNumberAchievementsByType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countNumberAchievementsByType(params?: CountNumberAchievementsByType$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.countNumberAchievementsByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `getAllAchievements()` */
  static readonly GetAllAchievementsPath = '/gametracker/v1/achievements/all';

  /**
   * Renvoie la liste des achievements.
   *
   * Renvoie la liste des achievements
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAchievements()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAchievements$Response(params?: GetAllAchievements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getAllAchievements(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements.
   *
   * Renvoie la liste des achievements
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAchievements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAchievements(params?: GetAllAchievements$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getAllAchievements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

  /** Path part for operation `getActiveAchievements()` */
  static readonly GetActiveAchievementsPath = '/gametracker/v1/achievements/active';

  /**
   * Renvoie la liste des achievements actifs.
   *
   * Renvoie la liste des achievements actifs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getActiveAchievements()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveAchievements$Response(params?: GetActiveAchievements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AchievementDto>>> {
    return getActiveAchievements(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des achievements actifs.
   *
   * Renvoie la liste des achievements actifs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getActiveAchievements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getActiveAchievements(params?: GetActiveAchievements$Params, context?: HttpContext): Observable<Array<AchievementDto>> {
    return this.getActiveAchievements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AchievementDto>>): Array<AchievementDto> => r.body)
    );
  }

}
