/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { calculateAverageRatingForGame } from '../fn/game-rating-controller/calculate-average-rating-for-game';
import { CalculateAverageRatingForGame$Params } from '../fn/game-rating-controller/calculate-average-rating-for-game';
import { countRatingsForGame } from '../fn/game-rating-controller/count-ratings-for-game';
import { CountRatingsForGame$Params } from '../fn/game-rating-controller/count-ratings-for-game';
import { deleteAllRatingsForGame } from '../fn/game-rating-controller/delete-all-ratings-for-game';
import { DeleteAllRatingsForGame$Params } from '../fn/game-rating-controller/delete-all-ratings-for-game';
import { deleteAllRatingsForUser } from '../fn/game-rating-controller/delete-all-ratings-for-user';
import { DeleteAllRatingsForUser$Params } from '../fn/game-rating-controller/delete-all-ratings-for-user';
import { deleteRating } from '../fn/game-rating-controller/delete-rating';
import { DeleteRating$Params } from '../fn/game-rating-controller/delete-rating';
import { GameRatingDto } from '../models/game-rating-dto';
import { getRatingByDate } from '../fn/game-rating-controller/get-rating-by-date';
import { GetRatingByDate$Params } from '../fn/game-rating-controller/get-rating-by-date';
import { getRatingById } from '../fn/game-rating-controller/get-rating-by-id';
import { GetRatingById$Params } from '../fn/game-rating-controller/get-rating-by-id';
import { getRatingsForGame } from '../fn/game-rating-controller/get-ratings-for-game';
import { GetRatingsForGame$Params } from '../fn/game-rating-controller/get-ratings-for-game';
import { getRecentRatings } from '../fn/game-rating-controller/get-recent-ratings';
import { GetRecentRatings$Params } from '../fn/game-rating-controller/get-recent-ratings';
import { getTopRatedGames } from '../fn/game-rating-controller/get-top-rated-games';
import { GetTopRatedGames$Params } from '../fn/game-rating-controller/get-top-rated-games';
import { getUserRatingForGame } from '../fn/game-rating-controller/get-user-rating-for-game';
import { GetUserRatingForGame$Params } from '../fn/game-rating-controller/get-user-rating-for-game';
import { PageGameRatingDto } from '../models/page-game-rating-dto';
import { searchRatings } from '../fn/game-rating-controller/search-ratings';
import { SearchRatings$Params } from '../fn/game-rating-controller/search-ratings';
import { submitRating } from '../fn/game-rating-controller/submit-rating';
import { SubmitRating$Params } from '../fn/game-rating-controller/submit-rating';
import { updateRating } from '../fn/game-rating-controller/update-rating';
import { UpdateRating$Params } from '../fn/game-rating-controller/update-rating';

@Injectable({ providedIn: 'root' })
export class GameRatingControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRating()` */
  static readonly UpdateRatingPath = '/gametracker/v1/rating/{ratingId}/update';

  /**
   * Mettre à jour une évaluation.
   *
   * Mettre à jour une évaluation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRating()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRating$Response(params: UpdateRating$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRatingDto>> {
    return updateRating(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour une évaluation.
   *
   * Mettre à jour une évaluation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRating$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRating(params: UpdateRating$Params, context?: HttpContext): Observable<GameRatingDto> {
    return this.updateRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRatingDto>): GameRatingDto => r.body)
    );
  }

  /** Path part for operation `submitRating()` */
  static readonly SubmitRatingPath = '/gametracker/v1/rating/create';

  /**
   * Ajouter une évaluation.
   *
   * Ajouter une évaluation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitRating()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRating$Response(params: SubmitRating$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRatingDto>> {
    return submitRating(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter une évaluation.
   *
   * Ajouter une évaluation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitRating$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitRating(params: SubmitRating$Params, context?: HttpContext): Observable<GameRatingDto> {
    return this.submitRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRatingDto>): GameRatingDto => r.body)
    );
  }

  /** Path part for operation `getRatingById()` */
  static readonly GetRatingByIdPath = '/gametracker/v1/rating/{ratingId}';

  /**
   * Récupérer une évaluation par son ID.
   *
   * Récupérer une évaluation par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRatingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingById$Response(params: GetRatingById$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRatingDto>> {
    return getRatingById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer une évaluation par son ID.
   *
   * Récupérer une évaluation par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRatingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingById(params: GetRatingById$Params, context?: HttpContext): Observable<GameRatingDto> {
    return this.getRatingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRatingDto>): GameRatingDto => r.body)
    );
  }

  /** Path part for operation `deleteRating()` */
  static readonly DeleteRatingPath = '/gametracker/v1/rating/{ratingId}';

  /**
   * Supprimer une évaluation.
   *
   * Supprimer une évaluation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRating()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRating$Response(params: DeleteRating$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRating(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer une évaluation.
   *
   * Supprimer une évaluation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRating$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRating(params: DeleteRating$Params, context?: HttpContext): Observable<void> {
    return this.deleteRating$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUserRatingForGame()` */
  static readonly GetUserRatingForGamePath = '/gametracker/v1/rating/user/{userId}/game/{gameId}';

  /**
   * Récupérer l'évaluation d'un utilisateur pour un jeu.
   *
   * Récupérer l'évaluation d'un utilisateur pour un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserRatingForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserRatingForGame$Response(params: GetUserRatingForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRatingDto>> {
    return getUserRatingForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer l'évaluation d'un utilisateur pour un jeu.
   *
   * Récupérer l'évaluation d'un utilisateur pour un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserRatingForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserRatingForGame(params: GetUserRatingForGame$Params, context?: HttpContext): Observable<GameRatingDto> {
    return this.getUserRatingForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRatingDto>): GameRatingDto => r.body)
    );
  }

  /** Path part for operation `getTopRatedGames()` */
  static readonly GetTopRatedGamesPath = '/gametracker/v1/rating/top/{limit}';

  /**
   * Récupérer les jeux les mieux notés.
   *
   * Récupérer les jeux les mieux notés
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTopRatedGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopRatedGames$Response(params: GetTopRatedGames$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getTopRatedGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux les mieux notés.
   *
   * Récupérer les jeux les mieux notés
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTopRatedGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopRatedGames(params: GetTopRatedGames$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getTopRatedGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `searchRatings()` */
  static readonly SearchRatingsPath = '/gametracker/v1/rating/search';

  /**
   * Rechercher des évaluations.
   *
   * Rechercher des évaluations
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchRatings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchRatings$Response(params: SearchRatings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRatingDto>> {
    return searchRatings(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des évaluations.
   *
   * Rechercher des évaluations
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchRatings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchRatings(params: SearchRatings$Params, context?: HttpContext): Observable<PageGameRatingDto> {
    return this.searchRatings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRatingDto>): PageGameRatingDto => r.body)
    );
  }

  /** Path part for operation `getRecentRatings()` */
  static readonly GetRecentRatingsPath = '/gametracker/v1/rating/recent';

  /**
   * Récupérer les évaluations récentes.
   *
   * Récupérer les évaluations récentes
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentRatings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentRatings$Response(params: GetRecentRatings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRatingDto>> {
    return getRecentRatings(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les évaluations récentes.
   *
   * Récupérer les évaluations récentes
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentRatings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentRatings(params: GetRecentRatings$Params, context?: HttpContext): Observable<PageGameRatingDto> {
    return this.getRecentRatings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRatingDto>): PageGameRatingDto => r.body)
    );
  }

  /** Path part for operation `getRatingsForGame()` */
  static readonly GetRatingsForGamePath = '/gametracker/v1/rating/game/{gameId}';

  /**
   * Récupérer les évaluations d'un jeu.
   *
   * Récupérer les évaluations d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRatingsForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingsForGame$Response(params: GetRatingsForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRatingDto>> {
    return getRatingsForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les évaluations d'un jeu.
   *
   * Récupérer les évaluations d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRatingsForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingsForGame(params: GetRatingsForGame$Params, context?: HttpContext): Observable<PageGameRatingDto> {
    return this.getRatingsForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRatingDto>): PageGameRatingDto => r.body)
    );
  }

  /** Path part for operation `countRatingsForGame()` */
  static readonly CountRatingsForGamePath = '/gametracker/v1/rating/game/{gameId}/count';

  /**
   * Compter le nombre d'évaluations d'un jeu.
   *
   * Compter le nombre d'évaluations d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countRatingsForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRatingsForGame$Response(params: CountRatingsForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countRatingsForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre d'évaluations d'un jeu.
   *
   * Compter le nombre d'évaluations d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countRatingsForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRatingsForGame(params: CountRatingsForGame$Params, context?: HttpContext): Observable<number> {
    return this.countRatingsForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `calculateAverageRatingForGame()` */
  static readonly CalculateAverageRatingForGamePath = '/gametracker/v1/rating/game/{gameId}/average';

  /**
   * Calculer la note moyenne d'un jeu.
   *
   * Calculer la note moyenne d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateAverageRatingForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAverageRatingForGame$Response(params: CalculateAverageRatingForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return calculateAverageRatingForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Calculer la note moyenne d'un jeu.
   *
   * Calculer la note moyenne d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateAverageRatingForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAverageRatingForGame(params: CalculateAverageRatingForGame$Params, context?: HttpContext): Observable<number> {
    return this.calculateAverageRatingForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getRatingByDate()` */
  static readonly GetRatingByDatePath = '/gametracker/v1/rating/date/{date}';

  /**
   * Récupérer les évaluations par date.
   *
   * Récupérer les évaluations par date
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRatingByDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingByDate$Response(params: GetRatingByDate$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRatingDto>> {
    return getRatingByDate(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les évaluations par date.
   *
   * Récupérer les évaluations par date
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRatingByDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRatingByDate(params: GetRatingByDate$Params, context?: HttpContext): Observable<GameRatingDto> {
    return this.getRatingByDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRatingDto>): GameRatingDto => r.body)
    );
  }

  /** Path part for operation `deleteAllRatingsForUser()` */
  static readonly DeleteAllRatingsForUserPath = '/gametracker/v1/rating/admin/user/{userId}/delete';

  /**
   * Supprimer toutes les évaluations d'un utilisateur.
   *
   * Supprimer toutes les évaluations d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllRatingsForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRatingsForUser$Response(params: DeleteAllRatingsForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllRatingsForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer toutes les évaluations d'un utilisateur.
   *
   * Supprimer toutes les évaluations d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllRatingsForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRatingsForUser(params: DeleteAllRatingsForUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllRatingsForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllRatingsForGame()` */
  static readonly DeleteAllRatingsForGamePath = '/gametracker/v1/rating/admin/game/{gameId}/delete';

  /**
   * Supprimer toutes les évaluations d'un jeu.
   *
   * Supprimer toutes les évaluations d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllRatingsForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRatingsForGame$Response(params: DeleteAllRatingsForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllRatingsForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer toutes les évaluations d'un jeu.
   *
   * Supprimer toutes les évaluations d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllRatingsForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRatingsForGame(params: DeleteAllRatingsForGame$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllRatingsForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
