/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPoints } from '../fn/user-controller/add-points';
import { AddPoints$Params } from '../fn/user-controller/add-points';
import { createUser } from '../fn/user-controller/create-user';
import { CreateUser$Params } from '../fn/user-controller/create-user';
import { deleteUser } from '../fn/user-controller/delete-user';
import { DeleteUser$Params } from '../fn/user-controller/delete-user';
import { exportUserData } from '../fn/user-controller/export-user-data';
import { ExportUserData$Params } from '../fn/user-controller/export-user-data';
import { getAllUsers } from '../fn/user-controller/get-all-users';
import { GetAllUsers$Params } from '../fn/user-controller/get-all-users';
import { getFriendsList } from '../fn/user-controller/get-friends-list';
import { GetFriendsList$Params } from '../fn/user-controller/get-friends-list';
import { getUserByEmail } from '../fn/user-controller/get-user-by-email';
import { GetUserByEmail$Params } from '../fn/user-controller/get-user-by-email';
import { getUserById } from '../fn/user-controller/get-user-by-id';
import { GetUserById$Params } from '../fn/user-controller/get-user-by-id';
import { getUserByUsername } from '../fn/user-controller/get-user-by-username';
import { GetUserByUsername$Params } from '../fn/user-controller/get-user-by-username';
import { getUsersByStatus } from '../fn/user-controller/get-users-by-status';
import { GetUsersByStatus$Params } from '../fn/user-controller/get-users-by-status';
import { importUserData } from '../fn/user-controller/import-user-data';
import { ImportUserData$Params } from '../fn/user-controller/import-user-data';
import { isAdultUser } from '../fn/user-controller/is-adult-user';
import { IsAdultUser$Params } from '../fn/user-controller/is-adult-user';
import { isEmailRegistered } from '../fn/user-controller/is-email-registered';
import { IsEmailRegistered$Params } from '../fn/user-controller/is-email-registered';
import { isUsernameAvailable } from '../fn/user-controller/is-username-available';
import { IsUsernameAvailable$Params } from '../fn/user-controller/is-username-available';
import { PageUserDto } from '../models/page-user-dto';
import { recordLogin } from '../fn/user-controller/record-login';
import { RecordLogin$Params } from '../fn/user-controller/record-login';
import { requestPasswordReset } from '../fn/user-controller/request-password-reset';
import { RequestPasswordReset$Params } from '../fn/user-controller/request-password-reset';
import { resetPassword } from '../fn/user-controller/reset-password';
import { ResetPassword$Params } from '../fn/user-controller/reset-password';
import { searchUsers } from '../fn/user-controller/search-users';
import { SearchUsers$Params } from '../fn/user-controller/search-users';
import { shareProfile } from '../fn/user-controller/share-profile';
import { ShareProfile$Params } from '../fn/user-controller/share-profile';
import { updateAvatar } from '../fn/user-controller/update-avatar';
import { UpdateAvatar$Params } from '../fn/user-controller/update-avatar';
import { updateOnlineStatus } from '../fn/user-controller/update-online-status';
import { UpdateOnlineStatus$Params } from '../fn/user-controller/update-online-status';
import { updatePlayStats } from '../fn/user-controller/update-play-stats';
import { UpdatePlayStats$Params } from '../fn/user-controller/update-play-stats';
import { updatePrivacySettings } from '../fn/user-controller/update-privacy-settings';
import { UpdatePrivacySettings$Params } from '../fn/user-controller/update-privacy-settings';
import { updateThemePreference } from '../fn/user-controller/update-theme-preference';
import { UpdateThemePreference$Params } from '../fn/user-controller/update-theme-preference';
import { updateUser } from '../fn/user-controller/update-user';
import { UpdateUser$Params } from '../fn/user-controller/update-user';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/gametracker/v1/users/update/{userId}';

  /**
   * Mettre à jour un utilisateur.
   *
   * Mettre à jour un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Response(params: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour un utilisateur.
   *
   * Mettre à jour un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser(params: UpdateUser$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updateThemePreference()` */
  static readonly UpdateThemePreferencePath = '/gametracker/v1/users/update-theme/{userId}';

  /**
   * Mettre à jour la préférence de thème d'un utilisateur.
   *
   * Mettre à jour la préférence de thème d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateThemePreference()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateThemePreference$Response(params: UpdateThemePreference$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateThemePreference(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour la préférence de thème d'un utilisateur.
   *
   * Mettre à jour la préférence de thème d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateThemePreference$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateThemePreference(params: UpdateThemePreference$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateThemePreference$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updatePlayStats()` */
  static readonly UpdatePlayStatsPath = '/gametracker/v1/users/update-stats/{userId}';

  /**
   * Mettre à jour les statistiques de jeu d'un utilisateur.
   *
   * Mettre à jour les statistiques de jeu d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePlayStats()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePlayStats$Response(params: UpdatePlayStats$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updatePlayStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour les statistiques de jeu d'un utilisateur.
   *
   * Mettre à jour les statistiques de jeu d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePlayStats$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePlayStats(params: UpdatePlayStats$Params, context?: HttpContext): Observable<UserDto> {
    return this.updatePlayStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updatePrivacySettings()` */
  static readonly UpdatePrivacySettingsPath = '/gametracker/v1/users/update-privacy/{userId}';

  /**
   * Mettre à jour les paramètres de confidentialité d'un utilisateur.
   *
   * Mettre à jour les paramètres de confidentialité d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePrivacySettings()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePrivacySettings$Response(params: UpdatePrivacySettings$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updatePrivacySettings(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour les paramètres de confidentialité d'un utilisateur.
   *
   * Mettre à jour les paramètres de confidentialité d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePrivacySettings$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePrivacySettings(params: UpdatePrivacySettings$Params, context?: HttpContext): Observable<UserDto> {
    return this.updatePrivacySettings$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updateOnlineStatus()` */
  static readonly UpdateOnlineStatusPath = '/gametracker/v1/users/update-online-status/{userId}';

  /**
   * Mettre à jour le statut en ligne d'un utilisateur.
   *
   * Mettre à jour le statut en ligne d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOnlineStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOnlineStatus$Response(params: UpdateOnlineStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateOnlineStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour le statut en ligne d'un utilisateur.
   *
   * Mettre à jour le statut en ligne d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOnlineStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateOnlineStatus(params: UpdateOnlineStatus$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateOnlineStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updateAvatar()` */
  static readonly UpdateAvatarPath = '/gametracker/v1/users/update-avatar/{userId}';

  /**
   * Mettre à jour l'avatar d'un utilisateur.
   *
   * Mettre à jour l'avatar d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAvatar()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAvatar$Response(params: UpdateAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour l'avatar d'un utilisateur.
   *
   * Mettre à jour l'avatar d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAvatar$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAvatar(params: UpdateAvatar$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `resetPassword()` */
  static readonly ResetPasswordPath = '/gametracker/v1/users/reset-password/{userId}';

  /**
   * Réinitialiser le mot de passe d'un utilisateur.
   *
   * Réinitialiser le mot de passe d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetPassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetPassword$Response(params: ResetPassword$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return resetPassword(this.http, this.rootUrl, params, context);
  }

  /**
   * Réinitialiser le mot de passe d'un utilisateur.
   *
   * Réinitialiser le mot de passe d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetPassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  resetPassword(params: ResetPassword$Params, context?: HttpContext): Observable<void> {
    return this.resetPassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `recordLogin()` */
  static readonly RecordLoginPath = '/gametracker/v1/users/record-login/{userId}';

  /**
   * Enregistrer la connexion d'un utilisateur.
   *
   * Enregistrer la connexion d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `recordLogin()` instead.
   *
   * This method doesn't expect any request body.
   */
  recordLogin$Response(params: RecordLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return recordLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Enregistrer la connexion d'un utilisateur.
   *
   * Enregistrer la connexion d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `recordLogin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  recordLogin(params: RecordLogin$Params, context?: HttpContext): Observable<UserDto> {
    return this.recordLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `addPoints()` */
  static readonly AddPointsPath = '/gametracker/v1/users/add-points/{userId}';

  /**
   * Ajouter des points à un utilisateur.
   *
   * Ajouter des points à un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPoints()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPoints$Response(params: AddPoints$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return addPoints(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter des points à un utilisateur.
   *
   * Ajouter des points à un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPoints$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPoints(params: AddPoints$Params, context?: HttpContext): Observable<UserDto> {
    return this.addPoints$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `shareProfile()` */
  static readonly ShareProfilePath = '/gametracker/v1/users/share/{userId}/{platform}';

  /**
   * Partager le profil d'un utilisateur sur une plateforme sociale.
   *
   * Partager le profil d'un utilisateur sur une plateforme sociale
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shareProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  shareProfile$Response(params: ShareProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return shareProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * Partager le profil d'un utilisateur sur une plateforme sociale.
   *
   * Partager le profil d'un utilisateur sur une plateforme sociale
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shareProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  shareProfile(params: ShareProfile$Params, context?: HttpContext): Observable<UserDto> {
    return this.shareProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `requestPasswordReset()` */
  static readonly RequestPasswordResetPath = '/gametracker/v1/users/request-password-reset';

  /**
   * Demander la réinitialisation du mot de passe.
   *
   * Demander la réinitialisation du mot de passe
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `requestPasswordReset()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  requestPasswordReset$Response(params: RequestPasswordReset$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return requestPasswordReset(this.http, this.rootUrl, params, context);
  }

  /**
   * Demander la réinitialisation du mot de passe.
   *
   * Demander la réinitialisation du mot de passe
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `requestPasswordReset$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  requestPasswordReset(params: RequestPasswordReset$Params, context?: HttpContext): Observable<void> {
    return this.requestPasswordReset$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `importUserData()` */
  static readonly ImportUserDataPath = '/gametracker/v1/users/import/{userId}';

  /**
   * Importer les données d'un utilisateur.
   *
   * Importer les données d'un utilisateur à partir d'un fichier JSON
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `importUserData()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  importUserData$Response(params: ImportUserData$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return importUserData(this.http, this.rootUrl, params, context);
  }

  /**
   * Importer les données d'un utilisateur.
   *
   * Importer les données d'un utilisateur à partir d'un fichier JSON
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `importUserData$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  importUserData(params: ImportUserData$Params, context?: HttpContext): Observable<UserDto> {
    return this.importUserData$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/gametracker/v1/users/create';

  /**
   * Créer un nouvel utilisateur.
   *
   * Créer un nouvel utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer un nouvel utilisateur.
   *
   * Créer un nouvel utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params: CreateUser$Params, context?: HttpContext): Observable<UserDto> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/gametracker/v1/users/{userId}';

  /**
   * Récupérer un utilisateur par son ID.
   *
   * Récupérer un utilisateur par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un utilisateur par son ID.
   *
   * Récupérer un utilisateur par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<UserDto> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getUserByUsername()` */
  static readonly GetUserByUsernamePath = '/gametracker/v1/users/username/{username}';

  /**
   * Récupérer un utilisateur par son nom d'utilisateur.
   *
   * Récupérer un utilisateur par son nom d'utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByUsername()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByUsername$Response(params: GetUserByUsername$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getUserByUsername(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un utilisateur par son nom d'utilisateur.
   *
   * Récupérer un utilisateur par son nom d'utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByUsername$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByUsername(params: GetUserByUsername$Params, context?: HttpContext): Observable<UserDto> {
    return this.getUserByUsername$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getUsersByStatus()` */
  static readonly GetUsersByStatusPath = '/gametracker/v1/users/status/{isActive}';

  /**
   * Récupérer les utilisateurs par statut.
   *
   * Récupérer les utilisateurs par statut (actif/inactif)
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByStatus$Response(params: GetUsersByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUserDto>> {
    return getUsersByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les utilisateurs par statut.
   *
   * Récupérer les utilisateurs par statut (actif/inactif)
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByStatus(params: GetUsersByStatus$Params, context?: HttpContext): Observable<PageUserDto> {
    return this.getUsersByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUserDto>): PageUserDto => r.body)
    );
  }

  /** Path part for operation `searchUsers()` */
  static readonly SearchUsersPath = '/gametracker/v1/users/search/{query}';

  /**
   * Rechercher des utilisateurs.
   *
   * Rechercher des utilisateurs par nom d'utilisateur ou adresse e-mail
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchUsers$Response(params: SearchUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUserDto>> {
    return searchUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des utilisateurs.
   *
   * Rechercher des utilisateurs par nom d'utilisateur ou adresse e-mail
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchUsers(params: SearchUsers$Params, context?: HttpContext): Observable<PageUserDto> {
    return this.searchUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUserDto>): PageUserDto => r.body)
    );
  }

  /** Path part for operation `getFriendsList()` */
  static readonly GetFriendsListPath = '/gametracker/v1/users/friends/{userId}';

  /**
   * Récupérer la liste des amis d'un utilisateur.
   *
   * Récupérer la liste des amis d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendsList$Response(params: GetFriendsList$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUserDto>> {
    return getFriendsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer la liste des amis d'un utilisateur.
   *
   * Récupérer la liste des amis d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendsList(params: GetFriendsList$Params, context?: HttpContext): Observable<PageUserDto> {
    return this.getFriendsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUserDto>): PageUserDto => r.body)
    );
  }

  /** Path part for operation `exportUserData()` */
  static readonly ExportUserDataPath = '/gametracker/v1/users/export/{userId}';

  /**
   * Exporter les données d'un utilisateur.
   *
   * Exporter les données d'un utilisateur au format JSON
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exportUserData()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportUserData$Response(params: ExportUserData$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return exportUserData(this.http, this.rootUrl, params, context);
  }

  /**
   * Exporter les données d'un utilisateur.
   *
   * Exporter les données d'un utilisateur au format JSON
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exportUserData$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportUserData(params: ExportUserData$Params, context?: HttpContext): Observable<string> {
    return this.exportUserData$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getUserByEmail()` */
  static readonly GetUserByEmailPath = '/gametracker/v1/users/email/{email}';

  /**
   * Récupérer un utilisateur par son adresse e-mail.
   *
   * Récupérer un utilisateur par son adresse e-mail
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail$Response(params: GetUserByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getUserByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un utilisateur par son adresse e-mail.
   *
   * Récupérer un utilisateur par son adresse e-mail
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail(params: GetUserByEmail$Params, context?: HttpContext): Observable<UserDto> {
    return this.getUserByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `isUsernameAvailable()` */
  static readonly IsUsernameAvailablePath = '/gametracker/v1/users/check-username/{username}';

  /**
   * Vérifier la disponibilité du nom d'utilisateur.
   *
   * Vérifier la disponibilité du nom d'utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isUsernameAvailable()` instead.
   *
   * This method doesn't expect any request body.
   */
  isUsernameAvailable$Response(params: IsUsernameAvailable$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isUsernameAvailable(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier la disponibilité du nom d'utilisateur.
   *
   * Vérifier la disponibilité du nom d'utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isUsernameAvailable$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isUsernameAvailable(params: IsUsernameAvailable$Params, context?: HttpContext): Observable<boolean> {
    return this.isUsernameAvailable$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `isEmailRegistered()` */
  static readonly IsEmailRegisteredPath = '/gametracker/v1/users/check-email/{email}';

  /**
   * Vérifier si l'adresse e-mail est enregistrée.
   *
   * Vérifier si l'adresse e-mail est enregistrée
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isEmailRegistered()` instead.
   *
   * This method doesn't expect any request body.
   */
  isEmailRegistered$Response(params: IsEmailRegistered$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isEmailRegistered(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si l'adresse e-mail est enregistrée.
   *
   * Vérifier si l'adresse e-mail est enregistrée
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isEmailRegistered$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isEmailRegistered(params: IsEmailRegistered$Params, context?: HttpContext): Observable<boolean> {
    return this.isEmailRegistered$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `isAdultUser()` */
  static readonly IsAdultUserPath = '/gametracker/v1/users/check-adult/{userId}';

  /**
   * Vérifier si l'utilisateur est majeur.
   *
   * Vérifier si l'utilisateur est majeur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isAdultUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  isAdultUser$Response(params: IsAdultUser$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isAdultUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si l'utilisateur est majeur.
   *
   * Vérifier si l'utilisateur est majeur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isAdultUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isAdultUser(params: IsAdultUser$Params, context?: HttpContext): Observable<boolean> {
    return this.isAdultUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/gametracker/v1/users/all';

  /**
   * Récupérer tous les utilisateurs.
   *
   * Récupérer tous les utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUserDto>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer tous les utilisateurs.
   *
   * Récupérer tous les utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params: GetAllUsers$Params, context?: HttpContext): Observable<PageUserDto> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUserDto>): PageUserDto => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/gametracker/v1/users/delete/{userId}';

  /**
   * Supprimer un utilisateur.
   *
   * Supprimer un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un utilisateur.
   *
   * Supprimer un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
