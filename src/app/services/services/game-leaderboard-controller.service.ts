/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteScoreEntry } from '../fn/game-leaderboard-controller/delete-score-entry';
import { DeleteScoreEntry$Params } from '../fn/game-leaderboard-controller/delete-score-entry';
import { GameLeaderboardDto } from '../models/game-leaderboard-dto';
import { getLeaderboardByGamePeriodScore } from '../fn/game-leaderboard-controller/get-leaderboard-by-game-period-score';
import { GetLeaderboardByGamePeriodScore$Params } from '../fn/game-leaderboard-controller/get-leaderboard-by-game-period-score';
import { getLeaderBoardByGameUserPeriod } from '../fn/game-leaderboard-controller/get-leader-board-by-game-user-period';
import { GetLeaderBoardByGameUserPeriod$Params } from '../fn/game-leaderboard-controller/get-leader-board-by-game-user-period';
import { getLeaderboardByPeriod } from '../fn/game-leaderboard-controller/get-leaderboard-by-period';
import { GetLeaderboardByPeriod$Params } from '../fn/game-leaderboard-controller/get-leaderboard-by-period';
import { getLeaderboardEntriesByDate } from '../fn/game-leaderboard-controller/get-leaderboard-entries-by-date';
import { GetLeaderboardEntriesByDate$Params } from '../fn/game-leaderboard-controller/get-leaderboard-entries-by-date';
import { getLeaderboardEntriesForUserAndGame } from '../fn/game-leaderboard-controller/get-leaderboard-entries-for-user-and-game';
import { GetLeaderboardEntriesForUserAndGame$Params } from '../fn/game-leaderboard-controller/get-leaderboard-entries-for-user-and-game';
import { getLeaderboardForGame } from '../fn/game-leaderboard-controller/get-leaderboard-for-game';
import { GetLeaderboardForGame$Params } from '../fn/game-leaderboard-controller/get-leaderboard-for-game';
import { getLeaderboardPageByRank } from '../fn/game-leaderboard-controller/get-leaderboard-page-by-rank';
import { GetLeaderboardPageByRank$Params } from '../fn/game-leaderboard-controller/get-leaderboard-page-by-rank';
import { getTopRankedPlayersByGamePeriod } from '../fn/game-leaderboard-controller/get-top-ranked-players-by-game-period';
import { GetTopRankedPlayersByGamePeriod$Params } from '../fn/game-leaderboard-controller/get-top-ranked-players-by-game-period';
import { PageGameLeaderboardDto } from '../models/page-game-leaderboard-dto';
import { resetLeaderboard } from '../fn/game-leaderboard-controller/reset-leaderboard';
import { ResetLeaderboard$Params } from '../fn/game-leaderboard-controller/reset-leaderboard';
import { submitScore } from '../fn/game-leaderboard-controller/submit-score';
import { SubmitScore$Params } from '../fn/game-leaderboard-controller/submit-score';
import { updateScore } from '../fn/game-leaderboard-controller/update-score';
import { UpdateScore$Params } from '../fn/game-leaderboard-controller/update-score';

@Injectable({ providedIn: 'root' })
export class GameLeaderboardControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateScore()` */
  static readonly UpdateScorePath = '/gametracker/v1/leaderboard/update/{entryId}/{newScore}';

  /**
   * Mettre à jour un score.
   *
   * Mettre à jour un score
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateScore()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateScore$Response(params: UpdateScore$Params, context?: HttpContext): Observable<StrictHttpResponse<GameLeaderboardDto>> {
    return updateScore(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour un score.
   *
   * Mettre à jour un score
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateScore$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateScore(params: UpdateScore$Params, context?: HttpContext): Observable<GameLeaderboardDto> {
    return this.updateScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameLeaderboardDto>): GameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `resetLeaderboard()` */
  static readonly ResetLeaderboardPath = '/gametracker/v1/leaderboard/reset/{gameId}/{period}';

  /**
   * Réinitialiser le leaderboard d'un jeu.
   *
   * Réinitialiser le leaderboard d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `resetLeaderboard()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetLeaderboard$Response(params: ResetLeaderboard$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return resetLeaderboard(this.http, this.rootUrl, params, context);
  }

  /**
   * Réinitialiser le leaderboard d'un jeu.
   *
   * Réinitialiser le leaderboard d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `resetLeaderboard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  resetLeaderboard(params: ResetLeaderboard$Params, context?: HttpContext): Observable<void> {
    return this.resetLeaderboard$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `submitScore()` */
  static readonly SubmitScorePath = '/gametracker/v1/leaderboard/submit';

  /**
   * Ajouter un score.
   *
   * Ajouter un score
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `submitScore()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitScore$Response(params: SubmitScore$Params, context?: HttpContext): Observable<StrictHttpResponse<GameLeaderboardDto>> {
    return submitScore(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter un score.
   *
   * Ajouter un score
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `submitScore$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  submitScore(params: SubmitScore$Params, context?: HttpContext): Observable<GameLeaderboardDto> {
    return this.submitScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameLeaderboardDto>): GameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `getLeaderboardEntriesForUserAndGame()` */
  static readonly GetLeaderboardEntriesForUserAndGamePath = '/gametracker/v1/leaderboard/user/{userId}/game/{gameId}';

  /**
   * Récupérer le leaderboard d'un utilisateur pour un jeu.
   *
   * Récupérer le leaderboard d'un utilisateur pour un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardEntriesForUserAndGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardEntriesForUserAndGame$Response(params: GetLeaderboardEntriesForUserAndGame$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameLeaderboardDto>>> {
    return getLeaderboardEntriesForUserAndGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard d'un utilisateur pour un jeu.
   *
   * Récupérer le leaderboard d'un utilisateur pour un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardEntriesForUserAndGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardEntriesForUserAndGame(params: GetLeaderboardEntriesForUserAndGame$Params, context?: HttpContext): Observable<Array<GameLeaderboardDto>> {
    return this.getLeaderboardEntriesForUserAndGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameLeaderboardDto>>): Array<GameLeaderboardDto> => r.body)
    );
  }

  /** Path part for operation `getLeaderboardByPeriod()` */
  static readonly GetLeaderboardByPeriodPath = '/gametracker/v1/leaderboard/period/{period}';

  /**
   * Récupérer le leaderboard par période.
   *
   * Récupérer le leaderboard par période
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardByPeriod()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardByPeriod$Response(params: GetLeaderboardByPeriod$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameLeaderboardDto>> {
    return getLeaderboardByPeriod(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard par période.
   *
   * Récupérer le leaderboard par période
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardByPeriod$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardByPeriod(params: GetLeaderboardByPeriod$Params, context?: HttpContext): Observable<PageGameLeaderboardDto> {
    return this.getLeaderboardByPeriod$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameLeaderboardDto>): PageGameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `getLeaderboardForGame()` */
  static readonly GetLeaderboardForGamePath = '/gametracker/v1/leaderboard/game/{gameId}/{period}';

  /**
   * Récupérer le leaderboard d'un jeu.
   *
   * Récupérer le leaderboard d'un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardForGame$Response(params: GetLeaderboardForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameLeaderboardDto>> {
    return getLeaderboardForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard d'un jeu.
   *
   * Récupérer le leaderboard d'un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardForGame(params: GetLeaderboardForGame$Params, context?: HttpContext): Observable<PageGameLeaderboardDto> {
    return this.getLeaderboardForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameLeaderboardDto>): PageGameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `getLeaderBoardByGameUserPeriod()` */
  static readonly GetLeaderBoardByGameUserPeriodPath = '/gametracker/v1/leaderboard/game/{gameId}/user/{userId}/period/{period}';

  /**
   * Récupérer le leaderboard d'un jeu pour un utilisateur.
   *
   * Récupérer le leaderboard d'un jeu pour un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderBoardByGameUserPeriod()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderBoardByGameUserPeriod$Response(params: GetLeaderBoardByGameUserPeriod$Params, context?: HttpContext): Observable<StrictHttpResponse<GameLeaderboardDto>> {
    return getLeaderBoardByGameUserPeriod(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard d'un jeu pour un utilisateur.
   *
   * Récupérer le leaderboard d'un jeu pour un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderBoardByGameUserPeriod$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderBoardByGameUserPeriod(params: GetLeaderBoardByGameUserPeriod$Params, context?: HttpContext): Observable<GameLeaderboardDto> {
    return this.getLeaderBoardByGameUserPeriod$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameLeaderboardDto>): GameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `getLeaderboardByGamePeriodScore()` */
  static readonly GetLeaderboardByGamePeriodScorePath = '/gametracker/v1/leaderboard/game/{gameId}/period/{period}';

  /**
   * Récupérer le leaderboard d'un jeu par période.
   *
   * Récupérer le leaderboard d'un jeu par période
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardByGamePeriodScore()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardByGamePeriodScore$Response(params: GetLeaderboardByGamePeriodScore$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameLeaderboardDto>>> {
    return getLeaderboardByGamePeriodScore(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard d'un jeu par période.
   *
   * Récupérer le leaderboard d'un jeu par période
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardByGamePeriodScore$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardByGamePeriodScore(params: GetLeaderboardByGamePeriodScore$Params, context?: HttpContext): Observable<Array<GameLeaderboardDto>> {
    return this.getLeaderboardByGamePeriodScore$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameLeaderboardDto>>): Array<GameLeaderboardDto> => r.body)
    );
  }

  /** Path part for operation `getLeaderboardPageByRank()` */
  static readonly GetLeaderboardPageByRankPath = '/gametracker/v1/leaderboard/game/{gameId}/period/{period}/page';

  /**
   * Récupérer le leaderboard d'un jeu par période avec pagination.
   *
   * Récupérer le leaderboard d'un jeu par période avec pagination
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardPageByRank()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardPageByRank$Response(params: GetLeaderboardPageByRank$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameLeaderboardDto>> {
    return getLeaderboardPageByRank(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard d'un jeu par période avec pagination.
   *
   * Récupérer le leaderboard d'un jeu par période avec pagination
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardPageByRank$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardPageByRank(params: GetLeaderboardPageByRank$Params, context?: HttpContext): Observable<PageGameLeaderboardDto> {
    return this.getLeaderboardPageByRank$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameLeaderboardDto>): PageGameLeaderboardDto => r.body)
    );
  }

  /** Path part for operation `getTopRankedPlayersByGamePeriod()` */
  static readonly GetTopRankedPlayersByGamePeriodPath = '/gametracker/v1/leaderboard/game/{gameId}/period/{period}/limit/{limit}';

  /**
   * Récupérer les meilleurs joueurs d'un jeu par période.
   *
   * Récupérer les meilleurs joueurs d'un jeu par période
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTopRankedPlayersByGamePeriod()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopRankedPlayersByGamePeriod$Response(params: GetTopRankedPlayersByGamePeriod$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameLeaderboardDto>>> {
    return getTopRankedPlayersByGamePeriod(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les meilleurs joueurs d'un jeu par période.
   *
   * Récupérer les meilleurs joueurs d'un jeu par période
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTopRankedPlayersByGamePeriod$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopRankedPlayersByGamePeriod(params: GetTopRankedPlayersByGamePeriod$Params, context?: HttpContext): Observable<Array<GameLeaderboardDto>> {
    return this.getTopRankedPlayersByGamePeriod$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameLeaderboardDto>>): Array<GameLeaderboardDto> => r.body)
    );
  }

  /** Path part for operation `getLeaderboardEntriesByDate()` */
  static readonly GetLeaderboardEntriesByDatePath = '/gametracker/v1/leaderboard/date/{date}';

  /**
   * Récupérer le leaderboard par date.
   *
   * Récupérer le leaderboard par date
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLeaderboardEntriesByDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardEntriesByDate$Response(params: GetLeaderboardEntriesByDate$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameLeaderboardDto>>> {
    return getLeaderboardEntriesByDate(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le leaderboard par date.
   *
   * Récupérer le leaderboard par date
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLeaderboardEntriesByDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLeaderboardEntriesByDate(params: GetLeaderboardEntriesByDate$Params, context?: HttpContext): Observable<Array<GameLeaderboardDto>> {
    return this.getLeaderboardEntriesByDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameLeaderboardDto>>): Array<GameLeaderboardDto> => r.body)
    );
  }

  /** Path part for operation `deleteScoreEntry()` */
  static readonly DeleteScoreEntryPath = '/gametracker/v1/leaderboard/delete/{entryId}';

  /**
   * Supprimer un score.
   *
   * Supprimer un score
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteScoreEntry()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScoreEntry$Response(params: DeleteScoreEntry$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteScoreEntry(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un score.
   *
   * Supprimer un score
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteScoreEntry$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteScoreEntry(params: DeleteScoreEntry$Params, context?: HttpContext): Observable<void> {
    return this.deleteScoreEntry$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
