/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNotification } from '../fn/notification-controller/create-notification';
import { CreateNotification$Params } from '../fn/notification-controller/create-notification';
import { deleteNotification } from '../fn/notification-controller/delete-notification';
import { DeleteNotification$Params } from '../fn/notification-controller/delete-notification';
import { getNotificationById } from '../fn/notification-controller/get-notification-by-id';
import { GetNotificationById$Params } from '../fn/notification-controller/get-notification-by-id';
import { getNotificationHistory } from '../fn/notification-controller/get-notification-history';
import { GetNotificationHistory$Params } from '../fn/notification-controller/get-notification-history';
import { getNotificationsByType } from '../fn/notification-controller/get-notifications-by-type';
import { GetNotificationsByType$Params } from '../fn/notification-controller/get-notifications-by-type';
import { getUnreadCount } from '../fn/notification-controller/get-unread-count';
import { GetUnreadCount$Params } from '../fn/notification-controller/get-unread-count';
import { getUnreadNotifications } from '../fn/notification-controller/get-unread-notifications';
import { GetUnreadNotifications$Params } from '../fn/notification-controller/get-unread-notifications';
import { getUserNotifications } from '../fn/notification-controller/get-user-notifications';
import { GetUserNotifications$Params } from '../fn/notification-controller/get-user-notifications';
import { markAllAsRead } from '../fn/notification-controller/mark-all-as-read';
import { MarkAllAsRead$Params } from '../fn/notification-controller/mark-all-as-read';
import { markAsRead } from '../fn/notification-controller/mark-as-read';
import { MarkAsRead$Params } from '../fn/notification-controller/mark-as-read';
import { NotificationDto } from '../models/notification-dto';
import { PageNotificationDto } from '../models/page-notification-dto';
import { updateNotificationContent } from '../fn/notification-controller/update-notification-content';
import { UpdateNotificationContent$Params } from '../fn/notification-controller/update-notification-content';

@Injectable({ providedIn: 'root' })
export class NotificationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateNotificationContent()` */
  static readonly UpdateNotificationContentPath = '/gametracker/v1/notification/{notificationId}/update';

  /**
   * Mettre à jour une notification.
   *
   * Mettre à jour une notification
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateNotificationContent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNotificationContent$Response(params: UpdateNotificationContent$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationDto>> {
    return updateNotificationContent(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour une notification.
   *
   * Mettre à jour une notification
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateNotificationContent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNotificationContent(params: UpdateNotificationContent$Params, context?: HttpContext): Observable<NotificationDto> {
    return this.updateNotificationContent$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationDto>): NotificationDto => r.body)
    );
  }

  /** Path part for operation `markAsRead()` */
  static readonly MarkAsReadPath = '/gametracker/v1/notification/{notificationId}/markAsRead';

  /**
   * Marquer une notification comme lue.
   *
   * Marquer une notification comme lue
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead$Response(params: MarkAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationDto>> {
    return markAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * Marquer une notification comme lue.
   *
   * Marquer une notification comme lue
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead(params: MarkAsRead$Params, context?: HttpContext): Observable<NotificationDto> {
    return this.markAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationDto>): NotificationDto => r.body)
    );
  }

  /** Path part for operation `markAllAsRead()` */
  static readonly MarkAllAsReadPath = '/gametracker/v1/notification/user/{userId}/markAllAsRead';

  /**
   * Marquer toutes les notifications d'un utilisateur comme lues.
   *
   * Marquer toutes les notifications d'un utilisateur comme lues
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAllAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead$Response(params: MarkAllAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return markAllAsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * Marquer toutes les notifications d'un utilisateur comme lues.
   *
   * Marquer toutes les notifications d'un utilisateur comme lues
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAllAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead(params: MarkAllAsRead$Params, context?: HttpContext): Observable<void> {
    return this.markAllAsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createNotification()` */
  static readonly CreateNotificationPath = '/gametracker/v1/notification/create';

  /**
   * Ajouter une notification.
   *
   * Ajouter une notification
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNotification()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNotification$Response(params: CreateNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationDto>> {
    return createNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter une notification.
   *
   * Ajouter une notification
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNotification$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNotification(params: CreateNotification$Params, context?: HttpContext): Observable<NotificationDto> {
    return this.createNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationDto>): NotificationDto => r.body)
    );
  }

  /** Path part for operation `getNotificationById()` */
  static readonly GetNotificationByIdPath = '/gametracker/v1/notification/{notificationId}';

  /**
   * Récupérer une notification par son ID.
   *
   * Récupérer une notification par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNotificationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNotificationById$Response(params: GetNotificationById$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationDto>> {
    return getNotificationById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer une notification par son ID.
   *
   * Récupérer une notification par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNotificationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNotificationById(params: GetNotificationById$Params, context?: HttpContext): Observable<NotificationDto> {
    return this.getNotificationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationDto>): NotificationDto => r.body)
    );
  }

  /** Path part for operation `deleteNotification()` */
  static readonly DeleteNotificationPath = '/gametracker/v1/notification/{notificationId}';

  /**
   * Supprimer une notification.
   *
   * Supprimer une notification
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteNotification()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNotification$Response(params: DeleteNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer une notification.
   *
   * Supprimer une notification
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteNotification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNotification(params: DeleteNotification$Params, context?: HttpContext): Observable<void> {
    return this.deleteNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUserNotifications()` */
  static readonly GetUserNotificationsPath = '/gametracker/v1/notification/user/{userId}';

  /**
   * Récupérer toutes les notifications d'un utilisateur.
   *
   * Récupérer toutes les notifications d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserNotifications$Response(params: GetUserNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationDto>> {
    return getUserNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les notifications d'un utilisateur.
   *
   * Récupérer toutes les notifications d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserNotifications(params: GetUserNotifications$Params, context?: HttpContext): Observable<PageNotificationDto> {
    return this.getUserNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationDto>): PageNotificationDto => r.body)
    );
  }

  /** Path part for operation `getUnreadNotifications()` */
  static readonly GetUnreadNotificationsPath = '/gametracker/v1/notification/user/{userId}/unread';

  /**
   * Récupérer toutes les notifications non lues d'un utilisateur.
   *
   * Récupérer toutes les notifications non lues d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadNotifications$Response(params: GetUnreadNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationDto>> {
    return getUnreadNotifications(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les notifications non lues d'un utilisateur.
   *
   * Récupérer toutes les notifications non lues d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadNotifications(params: GetUnreadNotifications$Params, context?: HttpContext): Observable<PageNotificationDto> {
    return this.getUnreadNotifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationDto>): PageNotificationDto => r.body)
    );
  }

  /** Path part for operation `getUnreadCount()` */
  static readonly GetUnreadCountPath = '/gametracker/v1/notification/user/{userId}/unreadCount';

  /**
   * Récupérer le nombre de notifications non lues d'un utilisateur.
   *
   * Récupérer le nombre de notifications non lues d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount$Response(params: GetUnreadCount$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getUnreadCount(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le nombre de notifications non lues d'un utilisateur.
   *
   * Récupérer le nombre de notifications non lues d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount(params: GetUnreadCount$Params, context?: HttpContext): Observable<number> {
    return this.getUnreadCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getNotificationsByType()` */
  static readonly GetNotificationsByTypePath = '/gametracker/v1/notification/user/{userId}/type';

  /**
   * Récupérer toutes les notifications d'un utilisateur par type.
   *
   * Récupérer toutes les notifications d'un utilisateur par type
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNotificationsByType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getNotificationsByType$Response(params: GetNotificationsByType$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationDto>> {
    return getNotificationsByType(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les notifications d'un utilisateur par type.
   *
   * Récupérer toutes les notifications d'un utilisateur par type
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNotificationsByType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getNotificationsByType(params: GetNotificationsByType$Params, context?: HttpContext): Observable<PageNotificationDto> {
    return this.getNotificationsByType$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationDto>): PageNotificationDto => r.body)
    );
  }

  /** Path part for operation `getNotificationHistory()` */
  static readonly GetNotificationHistoryPath = '/gametracker/v1/notification/user/{userId}/history';

  /**
   * Récupérer l'historique des notifications d'un utilisateur.
   *
   * Récupérer l'historique des notifications d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNotificationHistory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getNotificationHistory$Response(params: GetNotificationHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationDto>> {
    return getNotificationHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer l'historique des notifications d'un utilisateur.
   *
   * Récupérer l'historique des notifications d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNotificationHistory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  getNotificationHistory(params: GetNotificationHistory$Params, context?: HttpContext): Observable<PageNotificationDto> {
    return this.getNotificationHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationDto>): PageNotificationDto => r.body)
    );
  }

}
