/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addToFavorites } from '../fn/favorite-game-controller/add-to-favorites';
import { AddToFavorites$Params } from '../fn/favorite-game-controller/add-to-favorites';
import { clearUserFavorites } from '../fn/favorite-game-controller/clear-user-favorites';
import { ClearUserFavorites$Params } from '../fn/favorite-game-controller/clear-user-favorites';
import { countFavoritesByUser } from '../fn/favorite-game-controller/count-favorites-by-user';
import { CountFavoritesByUser$Params } from '../fn/favorite-game-controller/count-favorites-by-user';
import { deleteFavoriteByUserAndGame } from '../fn/favorite-game-controller/delete-favorite-by-user-and-game';
import { DeleteFavoriteByUserAndGame$Params } from '../fn/favorite-game-controller/delete-favorite-by-user-and-game';
import { FavoriteGameDto } from '../models/favorite-game-dto';
import { findFavoriteByUserAndGame } from '../fn/favorite-game-controller/find-favorite-by-user-and-game';
import { FindFavoriteByUserAndGame$Params } from '../fn/favorite-game-controller/find-favorite-by-user-and-game';
import { GameDto } from '../models/game-dto';
import { getCommonFavoriteGames } from '../fn/favorite-game-controller/get-common-favorite-games';
import { GetCommonFavoriteGames$Params } from '../fn/favorite-game-controller/get-common-favorite-games';
import { getFavoriteById } from '../fn/favorite-game-controller/get-favorite-by-id';
import { GetFavoriteById$Params } from '../fn/favorite-game-controller/get-favorite-by-id';
import { getFavoriteCountByGameCategory } from '../fn/favorite-game-controller/get-favorite-count-by-game-category';
import { GetFavoriteCountByGameCategory$Params } from '../fn/favorite-game-controller/get-favorite-count-by-game-category';
import { getFavoriteGamesForUser } from '../fn/favorite-game-controller/get-favorite-games-for-user';
import { GetFavoriteGamesForUser$Params } from '../fn/favorite-game-controller/get-favorite-games-for-user';
import { getMostFavoritedGames } from '../fn/favorite-game-controller/get-most-favorited-games';
import { GetMostFavoritedGames$Params } from '../fn/favorite-game-controller/get-most-favorited-games';
import { getRecentlyAddedFavoritesForUser } from '../fn/favorite-game-controller/get-recently-added-favorites-for-user';
import { GetRecentlyAddedFavoritesForUser$Params } from '../fn/favorite-game-controller/get-recently-added-favorites-for-user';
import { getTotalFavoritesCountForGame } from '../fn/favorite-game-controller/get-total-favorites-count-for-game';
import { GetTotalFavoritesCountForGame$Params } from '../fn/favorite-game-controller/get-total-favorites-count-for-game';
import { getUsersWhoFavoritedGame } from '../fn/favorite-game-controller/get-users-who-favorited-game';
import { GetUsersWhoFavoritedGame$Params } from '../fn/favorite-game-controller/get-users-who-favorited-game';
import { isGameFavoritedByUser } from '../fn/favorite-game-controller/is-game-favorited-by-user';
import { IsGameFavoritedByUser$Params } from '../fn/favorite-game-controller/is-game-favorited-by-user';
import { removeFromFavorites } from '../fn/favorite-game-controller/remove-from-favorites';
import { RemoveFromFavorites$Params } from '../fn/favorite-game-controller/remove-from-favorites';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class FavoriteGameControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addToFavorites()` */
  static readonly AddToFavoritesPath = '/gametracker/v1/favorites/add';

  /**
   * Ajouter un jeu aux favoris.
   *
   * Ajouter un jeu aux favoris d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addToFavorites()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addToFavorites$Response(params: AddToFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteGameDto>> {
    return addToFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * Ajouter un jeu aux favoris.
   *
   * Ajouter un jeu aux favoris d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addToFavorites$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addToFavorites(params: AddToFavorites$Params, context?: HttpContext): Observable<FavoriteGameDto> {
    return this.addToFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteGameDto>): FavoriteGameDto => r.body)
    );
  }

  /** Path part for operation `getFavoriteById()` */
  static readonly GetFavoriteByIdPath = '/gametracker/v1/favorites/{favoriteId}';

  /**
   * Récupérer un jeu favori par son ID.
   *
   * Récupérer un jeu favori spécifique par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFavoriteById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteById$Response(params: GetFavoriteById$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteGameDto>> {
    return getFavoriteById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un jeu favori par son ID.
   *
   * Récupérer un jeu favori spécifique par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFavoriteById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteById(params: GetFavoriteById$Params, context?: HttpContext): Observable<FavoriteGameDto> {
    return this.getFavoriteById$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteGameDto>): FavoriteGameDto => r.body)
    );
  }

  /** Path part for operation `getFavoriteGamesForUser()` */
  static readonly GetFavoriteGamesForUserPath = '/gametracker/v1/favorites/user/{userId}';

  /**
   * Récupérer les jeux favoris d'un utilisateur.
   *
   * Récupérer la liste des jeux favoris d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFavoriteGamesForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteGamesForUser$Response(params: GetFavoriteGamesForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameDto>>> {
    return getFavoriteGamesForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux favoris d'un utilisateur.
   *
   * Récupérer la liste des jeux favoris d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFavoriteGamesForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteGamesForUser(params: GetFavoriteGamesForUser$Params, context?: HttpContext): Observable<Array<GameDto>> {
    return this.getFavoriteGamesForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameDto>>): Array<GameDto> => r.body)
    );
  }

  /** Path part for operation `getRecentlyAddedFavoritesForUser()` */
  static readonly GetRecentlyAddedFavoritesForUserPath = '/gametracker/v1/favorites/recent/{userId}';

  /**
   * Récupérer les jeux favoris ajoutés récemment par un utilisateur.
   *
   * Récupérer la liste des jeux favoris ajoutés récemment par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentlyAddedFavoritesForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentlyAddedFavoritesForUser$Response(params: GetRecentlyAddedFavoritesForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FavoriteGameDto>>> {
    return getRecentlyAddedFavoritesForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux favoris ajoutés récemment par un utilisateur.
   *
   * Récupérer la liste des jeux favoris ajoutés récemment par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentlyAddedFavoritesForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentlyAddedFavoritesForUser(params: GetRecentlyAddedFavoritesForUser$Params, context?: HttpContext): Observable<Array<FavoriteGameDto>> {
    return this.getRecentlyAddedFavoritesForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FavoriteGameDto>>): Array<FavoriteGameDto> => r.body)
    );
  }

  /** Path part for operation `getMostFavoritedGames()` */
  static readonly GetMostFavoritedGamesPath = '/gametracker/v1/favorites/mostFavorited/{limit}';

  /**
   * Récupérer les jeux les plus favoris.
   *
   * Récupérer la liste des jeux les plus favoris
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostFavoritedGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostFavoritedGames$Response(params: GetMostFavoritedGames$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getMostFavoritedGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux les plus favoris.
   *
   * Récupérer la liste des jeux les plus favoris
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostFavoritedGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostFavoritedGames(params: GetMostFavoritedGames$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getMostFavoritedGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getUsersWhoFavoritedGame()` */
  static readonly GetUsersWhoFavoritedGamePath = '/gametracker/v1/favorites/game/{gameId}';

  /**
   * Récupérer les utilisateurs qui ont favorisé un jeu.
   *
   * Récupérer la liste des utilisateurs qui ont favorisé un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersWhoFavoritedGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersWhoFavoritedGame$Response(params: GetUsersWhoFavoritedGame$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getUsersWhoFavoritedGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les utilisateurs qui ont favorisé un jeu.
   *
   * Récupérer la liste des utilisateurs qui ont favorisé un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersWhoFavoritedGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersWhoFavoritedGame(params: GetUsersWhoFavoritedGame$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getUsersWhoFavoritedGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `findFavoriteByUserAndGame()` */
  static readonly FindFavoriteByUserAndGamePath = '/gametracker/v1/favorites/find/{userId}/{gameId}';

  /**
   * Vérifier si un jeu est favori pour un utilisateur spécifique.
   *
   * Vérifier si un jeu est dans les favoris d'un utilisateur spécifique
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findFavoriteByUserAndGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFavoriteByUserAndGame$Response(params: FindFavoriteByUserAndGame$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteGameDto>> {
    return findFavoriteByUserAndGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un jeu est favori pour un utilisateur spécifique.
   *
   * Vérifier si un jeu est dans les favoris d'un utilisateur spécifique
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findFavoriteByUserAndGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findFavoriteByUserAndGame(params: FindFavoriteByUserAndGame$Params, context?: HttpContext): Observable<FavoriteGameDto> {
    return this.findFavoriteByUserAndGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteGameDto>): FavoriteGameDto => r.body)
    );
  }

  /** Path part for operation `isGameFavoritedByUser()` */
  static readonly IsGameFavoritedByUserPath = '/gametracker/v1/favorites/exists/{userId}/{gameId}';

  /**
   * Vérifier si un jeu est favori pour un utilisateur.
   *
   * Vérifier si un jeu est dans les favoris d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `isGameFavoritedByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  isGameFavoritedByUser$Response(params: IsGameFavoritedByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return isGameFavoritedByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un jeu est favori pour un utilisateur.
   *
   * Vérifier si un jeu est dans les favoris d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `isGameFavoritedByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  isGameFavoritedByUser(params: IsGameFavoritedByUser$Params, context?: HttpContext): Observable<boolean> {
    return this.isGameFavoritedByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `countFavoritesByUser()` */
  static readonly CountFavoritesByUserPath = '/gametracker/v1/favorites/count/{userId}';

  /**
   * Compter le nombre de jeux favoris pour un utilisateur.
   *
   * Compter le nombre total de jeux favoris pour un utilisateur spécifique
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countFavoritesByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countFavoritesByUser$Response(params: CountFavoritesByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countFavoritesByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de jeux favoris pour un utilisateur.
   *
   * Compter le nombre total de jeux favoris pour un utilisateur spécifique
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countFavoritesByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countFavoritesByUser(params: CountFavoritesByUser$Params, context?: HttpContext): Observable<number> {
    return this.countFavoritesByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getTotalFavoritesCountForGame()` */
  static readonly GetTotalFavoritesCountForGamePath = '/gametracker/v1/favorites/count/{gameId}';

  /**
   * Compter le nombre de favoris pour un jeu.
   *
   * Compter le nombre total de favoris pour un jeu spécifique
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalFavoritesCountForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalFavoritesCountForGame$Response(params: GetTotalFavoritesCountForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalFavoritesCountForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de favoris pour un jeu.
   *
   * Compter le nombre total de favoris pour un jeu spécifique
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalFavoritesCountForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalFavoritesCountForGame(params: GetTotalFavoritesCountForGame$Params, context?: HttpContext): Observable<number> {
    return this.getTotalFavoritesCountForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getFavoriteCountByGameCategory()` */
  static readonly GetFavoriteCountByGameCategoryPath = '/gametracker/v1/favorites/count/category';

  /**
   * Compter le nombre de favoris par catégorie de jeu.
   *
   * Compter le nombre total de favoris par catégorie de jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFavoriteCountByGameCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteCountByGameCategory$Response(params?: GetFavoriteCountByGameCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getFavoriteCountByGameCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de favoris par catégorie de jeu.
   *
   * Compter le nombre total de favoris par catégorie de jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFavoriteCountByGameCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavoriteCountByGameCategory(params?: GetFavoriteCountByGameCategory$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getFavoriteCountByGameCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getCommonFavoriteGames()` */
  static readonly GetCommonFavoriteGamesPath = '/gametracker/v1/favorites/common/{userId1}/{userId2}';

  /**
   * Trouver les jeux favoris communs entre deux utilisateurs.
   *
   * Récupérer la liste des jeux favoris communs entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommonFavoriteGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommonFavoriteGames$Response(params: GetCommonFavoriteGames$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameDto>>> {
    return getCommonFavoriteGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Trouver les jeux favoris communs entre deux utilisateurs.
   *
   * Récupérer la liste des jeux favoris communs entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommonFavoriteGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommonFavoriteGames(params: GetCommonFavoriteGames$Params, context?: HttpContext): Observable<Array<GameDto>> {
    return this.getCommonFavoriteGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameDto>>): Array<GameDto> => r.body)
    );
  }

  /** Path part for operation `removeFromFavorites()` */
  static readonly RemoveFromFavoritesPath = '/gametracker/v1/favorites/remove/{favoriteId}';

  /**
   * Supprimer un jeu des favoris.
   *
   * Supprimer un jeu des favoris d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeFromFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFromFavorites$Response(params: RemoveFromFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeFromFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un jeu des favoris.
   *
   * Supprimer un jeu des favoris d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeFromFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFromFavorites(params: RemoveFromFavorites$Params, context?: HttpContext): Observable<void> {
    return this.removeFromFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteFavoriteByUserAndGame()` */
  static readonly DeleteFavoriteByUserAndGamePath = '/gametracker/v1/favorites/delete/{userId}/{gameId}';

  /**
   * Supprimer un jeu favori pour un utilisateur spécifique.
   *
   * Supprimer un jeu favori pour un utilisateur spécifique
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFavoriteByUserAndGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFavoriteByUserAndGame$Response(params: DeleteFavoriteByUserAndGame$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFavoriteByUserAndGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un jeu favori pour un utilisateur spécifique.
   *
   * Supprimer un jeu favori pour un utilisateur spécifique
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFavoriteByUserAndGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFavoriteByUserAndGame(params: DeleteFavoriteByUserAndGame$Params, context?: HttpContext): Observable<void> {
    return this.deleteFavoriteByUserAndGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `clearUserFavorites()` */
  static readonly ClearUserFavoritesPath = '/gametracker/v1/favorites/clear/{userId}';

  /**
   * Supprimer tous les jeux favoris d'un utilisateur.
   *
   * Supprimer tous les jeux favoris d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearUserFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearUserFavorites$Response(params: ClearUserFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return clearUserFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer tous les jeux favoris d'un utilisateur.
   *
   * Supprimer tous les jeux favoris d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearUserFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearUserFavorites(params: ClearUserFavorites$Params, context?: HttpContext): Observable<void> {
    return this.clearUserFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
