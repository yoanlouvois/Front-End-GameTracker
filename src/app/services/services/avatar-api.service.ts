/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AvatarDto } from '../models/avatar-dto';
import { avatarExists } from '../fn/avatar-api/avatar-exists';
import { AvatarExists$Params } from '../fn/avatar-api/avatar-exists';
import { deleteAvatar } from '../fn/avatar-api/delete-avatar';
import { DeleteAvatar$Params } from '../fn/avatar-api/delete-avatar';
import { getAllAvatars } from '../fn/avatar-api/get-all-avatars';
import { GetAllAvatars$Params } from '../fn/avatar-api/get-all-avatars';
import { getAllDefaultAvatars } from '../fn/avatar-api/get-all-default-avatars';
import { GetAllDefaultAvatars$Params } from '../fn/avatar-api/get-all-default-avatars';
import { getAvatarById } from '../fn/avatar-api/get-avatar-by-id';
import { GetAvatarById$Params } from '../fn/avatar-api/get-avatar-by-id';
import { getMostPopularAvatars } from '../fn/avatar-api/get-most-popular-avatars';
import { GetMostPopularAvatars$Params } from '../fn/avatar-api/get-most-popular-avatars';
import { getUnusedAvatars } from '../fn/avatar-api/get-unused-avatars';
import { GetUnusedAvatars$Params } from '../fn/avatar-api/get-unused-avatars';
import { getUserCountByAvatarId } from '../fn/avatar-api/get-user-count-by-avatar-id';
import { GetUserCountByAvatarId$Params } from '../fn/avatar-api/get-user-count-by-avatar-id';
import { updateAvatar1 } from '../fn/avatar-api/update-avatar-1';
import { UpdateAvatar1$Params } from '../fn/avatar-api/update-avatar-1';
import { uploadAvatar } from '../fn/avatar-api/upload-avatar';
import { UploadAvatar$Params } from '../fn/avatar-api/upload-avatar';


/**
 * API pour les avatars
 */
@Injectable({ providedIn: 'root' })
export class AvatarApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateAvatar1()` */
  static readonly UpdateAvatar1Path = '/gametracker/v1/avatars/update/{idAvatar}';

  /**
   * Met à jour un avatar.
   *
   * Met à jour un avatar
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAvatar1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAvatar1$Response(params: UpdateAvatar1$Params, context?: HttpContext): Observable<StrictHttpResponse<AvatarDto>> {
    return updateAvatar1(this.http, this.rootUrl, params, context);
  }

  /**
   * Met à jour un avatar.
   *
   * Met à jour un avatar
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAvatar1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAvatar1(params: UpdateAvatar1$Params, context?: HttpContext): Observable<AvatarDto> {
    return this.updateAvatar1$Response(params, context).pipe(
      map((r: StrictHttpResponse<AvatarDto>): AvatarDto => r.body)
    );
  }

  /** Path part for operation `uploadAvatar()` */
  static readonly UploadAvatarPath = '/gametracker/v1/avatars/create';

  /**
   * Crée un nouvel avatar.
   *
   * Crée un nouvel avatar
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAvatar()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadAvatar$Response(params: UploadAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<AvatarDto>> {
    return uploadAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * Crée un nouvel avatar.
   *
   * Crée un nouvel avatar
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAvatar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  uploadAvatar(params: UploadAvatar$Params, context?: HttpContext): Observable<AvatarDto> {
    return this.uploadAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<AvatarDto>): AvatarDto => r.body)
    );
  }

  /** Path part for operation `getAvatarById()` */
  static readonly GetAvatarByIdPath = '/gametracker/v1/avatars/{idAvatar}';

  /**
   * Renvoie un avatar par son ID.
   *
   * Renvoie un avatar par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvatarById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvatarById$Response(params: GetAvatarById$Params, context?: HttpContext): Observable<StrictHttpResponse<AvatarDto>> {
    return getAvatarById(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie un avatar par son ID.
   *
   * Renvoie un avatar par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvatarById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvatarById(params: GetAvatarById$Params, context?: HttpContext): Observable<AvatarDto> {
    return this.getAvatarById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AvatarDto>): AvatarDto => r.body)
    );
  }

  /** Path part for operation `getUserCountByAvatarId()` */
  static readonly GetUserCountByAvatarIdPath = '/gametracker/v1/avatars/userCount/{idAvatar}';

  /**
   * Renvoie le nombre d'utilisateurs ayant cet avatar.
   *
   * Renvoie le nombre d'utilisateurs ayant cet avatar
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserCountByAvatarId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserCountByAvatarId$Response(params?: GetUserCountByAvatarId$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getUserCountByAvatarId(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le nombre d'utilisateurs ayant cet avatar.
   *
   * Renvoie le nombre d'utilisateurs ayant cet avatar
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserCountByAvatarId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserCountByAvatarId(params?: GetUserCountByAvatarId$Params, context?: HttpContext): Observable<number> {
    return this.getUserCountByAvatarId$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getUnusedAvatars()` */
  static readonly GetUnusedAvatarsPath = '/gametracker/v1/avatars/unused';

  /**
   * Renvoie la liste des avatars non utilisés.
   *
   * Renvoie la liste des avatars non utilisés
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnusedAvatars()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnusedAvatars$Response(params?: GetUnusedAvatars$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AvatarDto>>> {
    return getUnusedAvatars(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des avatars non utilisés.
   *
   * Renvoie la liste des avatars non utilisés
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnusedAvatars$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnusedAvatars(params?: GetUnusedAvatars$Params, context?: HttpContext): Observable<Array<AvatarDto>> {
    return this.getUnusedAvatars$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AvatarDto>>): Array<AvatarDto> => r.body)
    );
  }

  /** Path part for operation `getMostPopularAvatars()` */
  static readonly GetMostPopularAvatarsPath = '/gametracker/v1/avatars/mostPopular';

  /**
   * Renvoie la liste des avatars les plus populaires.
   *
   * Renvoie la liste des avatars les plus populaires
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostPopularAvatars()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularAvatars$Response(params?: GetMostPopularAvatars$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AvatarDto>>> {
    return getMostPopularAvatars(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des avatars les plus populaires.
   *
   * Renvoie la liste des avatars les plus populaires
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostPopularAvatars$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularAvatars(params?: GetMostPopularAvatars$Params, context?: HttpContext): Observable<Array<AvatarDto>> {
    return this.getMostPopularAvatars$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AvatarDto>>): Array<AvatarDto> => r.body)
    );
  }

  /** Path part for operation `avatarExists()` */
  static readonly AvatarExistsPath = '/gametracker/v1/avatars/exists/{idAvatar}';

  /**
   * Vérifie si un avatar existe.
   *
   * Vérifie si un avatar existe
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `avatarExists()` instead.
   *
   * This method doesn't expect any request body.
   */
  avatarExists$Response(params: AvatarExists$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return avatarExists(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifie si un avatar existe.
   *
   * Vérifie si un avatar existe
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `avatarExists$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  avatarExists(params: AvatarExists$Params, context?: HttpContext): Observable<boolean> {
    return this.avatarExists$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getAllDefaultAvatars()` */
  static readonly GetAllDefaultAvatarsPath = '/gametracker/v1/avatars/default/all';

  /**
   * Renvoie la liste des avatars par défaut.
   *
   * Renvoie la liste des avatars par défaut
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDefaultAvatars()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDefaultAvatars$Response(params?: GetAllDefaultAvatars$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AvatarDto>>> {
    return getAllDefaultAvatars(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des avatars par défaut.
   *
   * Renvoie la liste des avatars par défaut
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDefaultAvatars$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDefaultAvatars(params?: GetAllDefaultAvatars$Params, context?: HttpContext): Observable<Array<AvatarDto>> {
    return this.getAllDefaultAvatars$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AvatarDto>>): Array<AvatarDto> => r.body)
    );
  }

  /** Path part for operation `getAllAvatars()` */
  static readonly GetAllAvatarsPath = '/gametracker/v1/avatars/all';

  /**
   * Renvoie la liste des avatars.
   *
   * Renvoie la liste des avatars
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAvatars()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAvatars$Response(params?: GetAllAvatars$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AvatarDto>>> {
    return getAllAvatars(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la liste des avatars.
   *
   * Renvoie la liste des avatars
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAvatars$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAvatars(params?: GetAllAvatars$Params, context?: HttpContext): Observable<Array<AvatarDto>> {
    return this.getAllAvatars$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AvatarDto>>): Array<AvatarDto> => r.body)
    );
  }

  /** Path part for operation `deleteAvatar()` */
  static readonly DeleteAvatarPath = '/gametracker/v1/avatars/delete/{idAvatar}';

  /**
   * Supprime un avatar.
   *
   * Supprime un avatar
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAvatar()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAvatar$Response(params: DeleteAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprime un avatar.
   *
   * Supprime un avatar
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAvatar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAvatar(params: DeleteAvatar$Params, context?: HttpContext): Observable<void> {
    return this.deleteAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
