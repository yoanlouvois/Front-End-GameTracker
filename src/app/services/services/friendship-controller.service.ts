/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptFriendRequest } from '../fn/friendship-controller/accept-friend-request';
import { AcceptFriendRequest$Params } from '../fn/friendship-controller/accept-friend-request';
import { cancelFriendship } from '../fn/friendship-controller/cancel-friendship';
import { CancelFriendship$Params } from '../fn/friendship-controller/cancel-friendship';
import { createFriendship } from '../fn/friendship-controller/create-friendship';
import { CreateFriendship$Params } from '../fn/friendship-controller/create-friendship';
import { deleteFriendship } from '../fn/friendship-controller/delete-friendship';
import { DeleteFriendship$Params } from '../fn/friendship-controller/delete-friendship';
import { FriendshipDto } from '../models/friendship-dto';
import { friendshipExists } from '../fn/friendship-controller/friendship-exists';
import { FriendshipExists$Params } from '../fn/friendship-controller/friendship-exists';
import { getAllFriendships } from '../fn/friendship-controller/get-all-friendships';
import { GetAllFriendships$Params } from '../fn/friendship-controller/get-all-friendships';
import { getAllFriendshipsForUser } from '../fn/friendship-controller/get-all-friendships-for-user';
import { GetAllFriendshipsForUser$Params } from '../fn/friendship-controller/get-all-friendships-for-user';
import { getFriendCount } from '../fn/friendship-controller/get-friend-count';
import { GetFriendCount$Params } from '../fn/friendship-controller/get-friend-count';
import { getFriendshipBetweenUsers } from '../fn/friendship-controller/get-friendship-between-users';
import { GetFriendshipBetweenUsers$Params } from '../fn/friendship-controller/get-friendship-between-users';
import { getFriendshipById } from '../fn/friendship-controller/get-friendship-by-id';
import { GetFriendshipById$Params } from '../fn/friendship-controller/get-friendship-by-id';
import { getFriendshipsForUserByStatus } from '../fn/friendship-controller/get-friendships-for-user-by-status';
import { GetFriendshipsForUserByStatus$Params } from '../fn/friendship-controller/get-friendships-for-user-by-status';
import { getFriendsList1 } from '../fn/friendship-controller/get-friends-list-1';
import { GetFriendsList1$Params } from '../fn/friendship-controller/get-friends-list-1';
import { getMutualFriends } from '../fn/friendship-controller/get-mutual-friends';
import { GetMutualFriends$Params } from '../fn/friendship-controller/get-mutual-friends';
import { getPendingRequests } from '../fn/friendship-controller/get-pending-requests';
import { GetPendingRequests$Params } from '../fn/friendship-controller/get-pending-requests';
import { getRelationshipStatus } from '../fn/friendship-controller/get-relationship-status';
import { GetRelationshipStatus$Params } from '../fn/friendship-controller/get-relationship-status';
import { hasPendingRequestBetween } from '../fn/friendship-controller/has-pending-request-between';
import { HasPendingRequestBetween$Params } from '../fn/friendship-controller/has-pending-request-between';
import { rejectFriendRequest } from '../fn/friendship-controller/reject-friend-request';
import { RejectFriendRequest$Params } from '../fn/friendship-controller/reject-friend-request';
import { removeAllFriendshipsForUser } from '../fn/friendship-controller/remove-all-friendships-for-user';
import { RemoveAllFriendshipsForUser$Params } from '../fn/friendship-controller/remove-all-friendships-for-user';
import { searchFriendshipsByUser } from '../fn/friendship-controller/search-friendships-by-user';
import { SearchFriendshipsByUser$Params } from '../fn/friendship-controller/search-friendships-by-user';
import { sendFriendRequest } from '../fn/friendship-controller/send-friend-request';
import { SendFriendRequest$Params } from '../fn/friendship-controller/send-friend-request';
import { suggestFriends } from '../fn/friendship-controller/suggest-friends';
import { SuggestFriends$Params } from '../fn/friendship-controller/suggest-friends';
import { updateFriendshipStatus } from '../fn/friendship-controller/update-friendship-status';
import { UpdateFriendshipStatus$Params } from '../fn/friendship-controller/update-friendship-status';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class FriendshipControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateFriendshipStatus()` */
  static readonly UpdateFriendshipStatusPath = '/gametracker/v1/friendships/update/{friendshipId}';

  /**
   * Mettre à jour le statut d'une amitié.
   *
   * Mettre à jour le statut d'une amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFriendshipStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFriendshipStatus$Response(params: UpdateFriendshipStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return updateFriendshipStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour le statut d'une amitié.
   *
   * Mettre à jour le statut d'une amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFriendshipStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFriendshipStatus(params: UpdateFriendshipStatus$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.updateFriendshipStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `rejectFriendRequest()` */
  static readonly RejectFriendRequestPath = '/gametracker/v1/friendships/reject/{friendshipId}';

  /**
   * Rejeter une demande d'amitié.
   *
   * Rejeter une demande d'amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectFriendRequest$Response(params: RejectFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return rejectFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * Rejeter une demande d'amitié.
   *
   * Rejeter une demande d'amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectFriendRequest(params: RejectFriendRequest$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.rejectFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `cancelFriendship()` */
  static readonly CancelFriendshipPath = '/gametracker/v1/friendships/cancel/{userId}/friend/{friendId}';

  /**
   * Annuler une demande d'amitié.
   *
   * Annuler une demande d'amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelFriendship()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelFriendship$Response(params: CancelFriendship$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return cancelFriendship(this.http, this.rootUrl, params, context);
  }

  /**
   * Annuler une demande d'amitié.
   *
   * Annuler une demande d'amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelFriendship$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelFriendship(params: CancelFriendship$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.cancelFriendship$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `acceptFriendRequest()` */
  static readonly AcceptFriendRequestPath = '/gametracker/v1/friendships/accept/{friendshipId}';

  /**
   * Accepter une demande d'amitié.
   *
   * Accepter une demande d'amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptFriendRequest$Response(params: AcceptFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return acceptFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * Accepter une demande d'amitié.
   *
   * Accepter une demande d'amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptFriendRequest(params: AcceptFriendRequest$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.acceptFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `sendFriendRequest()` */
  static readonly SendFriendRequestPath = '/gametracker/v1/friendships/send/{senderId}/to/{receiverId}';

  /**
   * Envoyer une demande d'amitié.
   *
   * Envoyer une demande d'amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendFriendRequest()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendFriendRequest$Response(params: SendFriendRequest$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return sendFriendRequest(this.http, this.rootUrl, params, context);
  }

  /**
   * Envoyer une demande d'amitié.
   *
   * Envoyer une demande d'amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendFriendRequest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendFriendRequest(params: SendFriendRequest$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.sendFriendRequest$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `createFriendship()` */
  static readonly CreateFriendshipPath = '/gametracker/v1/friendships/create';

  /**
   * Créer une amitié.
   *
   * Créer une amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createFriendship()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFriendship$Response(params: CreateFriendship$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return createFriendship(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer une amitié.
   *
   * Créer une amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createFriendship$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createFriendship(params: CreateFriendship$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.createFriendship$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `getFriendshipById()` */
  static readonly GetFriendshipByIdPath = '/gametracker/v1/friendships/{friendshipId}';

  /**
   * Récupérer une amitié par son ID.
   *
   * Récupérer une amitié entre deux utilisateurs par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendshipById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipById$Response(params: GetFriendshipById$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return getFriendshipById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer une amitié par son ID.
   *
   * Récupérer une amitié entre deux utilisateurs par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendshipById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipById(params: GetFriendshipById$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.getFriendshipById$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `getAllFriendshipsForUser()` */
  static readonly GetAllFriendshipsForUserPath = '/gametracker/v1/friendships/user/{userId}';

  /**
   * Récupérer toutes les amitiés d'un utilisateur.
   *
   * Récupérer toutes les amitiés d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFriendshipsForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFriendshipsForUser$Response(params: GetAllFriendshipsForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipDto>>> {
    return getAllFriendshipsForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les amitiés d'un utilisateur.
   *
   * Récupérer toutes les amitiés d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFriendshipsForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFriendshipsForUser(params: GetAllFriendshipsForUser$Params, context?: HttpContext): Observable<Array<FriendshipDto>> {
    return this.getAllFriendshipsForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipDto>>): Array<FriendshipDto> => r.body)
    );
  }

  /** Path part for operation `getFriendshipBetweenUsers()` */
  static readonly GetFriendshipBetweenUsersPath = '/gametracker/v1/friendships/user/{user1Id}/user/{user2Id}';

  /**
   * Récupérer une amitié entre deux utilisateurs.
   *
   * Récupérer une amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendshipBetweenUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipBetweenUsers$Response(params: GetFriendshipBetweenUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<FriendshipDto>> {
    return getFriendshipBetweenUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer une amitié entre deux utilisateurs.
   *
   * Récupérer une amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendshipBetweenUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipBetweenUsers(params: GetFriendshipBetweenUsers$Params, context?: HttpContext): Observable<FriendshipDto> {
    return this.getFriendshipBetweenUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<FriendshipDto>): FriendshipDto => r.body)
    );
  }

  /** Path part for operation `suggestFriends()` */
  static readonly SuggestFriendsPath = '/gametracker/v1/friendships/suggest/{userId}';

  /**
   * Suggérer des amis à un utilisateur.
   *
   * Suggérer des amis à un utilisateur en fonction de ses amis actuels
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `suggestFriends()` instead.
   *
   * This method doesn't expect any request body.
   */
  suggestFriends$Response(params: SuggestFriends$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return suggestFriends(this.http, this.rootUrl, params, context);
  }

  /**
   * Suggérer des amis à un utilisateur.
   *
   * Suggérer des amis à un utilisateur en fonction de ses amis actuels
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `suggestFriends$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  suggestFriends(params: SuggestFriends$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.suggestFriends$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getFriendshipsForUserByStatus()` */
  static readonly GetFriendshipsForUserByStatusPath = '/gametracker/v1/friendships/status/{user}';

  /**
   * Récupérer les amitiés d'un utilisateur par statut.
   *
   * Récupérer les amitiés d'un utilisateur par statut
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendshipsForUserByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipsForUserByStatus$Response(params: GetFriendshipsForUserByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipDto>>> {
    return getFriendshipsForUserByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les amitiés d'un utilisateur par statut.
   *
   * Récupérer les amitiés d'un utilisateur par statut
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendshipsForUserByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendshipsForUserByStatus(params: GetFriendshipsForUserByStatus$Params, context?: HttpContext): Observable<Array<FriendshipDto>> {
    return this.getFriendshipsForUserByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipDto>>): Array<FriendshipDto> => r.body)
    );
  }

  /** Path part for operation `getRelationshipStatus()` */
  static readonly GetRelationshipStatusPath = '/gametracker/v1/friendships/status/{user1Id}/user/{user2Id}';

  /**
   * Vérifier le statut d'une amitié entre deux utilisateurs.
   *
   * Vérifier le statut d'une amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRelationshipStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRelationshipStatus$Response(params: GetRelationshipStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<'PENDING' | 'ACCEPTED' | 'DECLINED'>> {
    return getRelationshipStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier le statut d'une amitié entre deux utilisateurs.
   *
   * Vérifier le statut d'une amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRelationshipStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRelationshipStatus(params: GetRelationshipStatus$Params, context?: HttpContext): Observable<'PENDING' | 'ACCEPTED' | 'DECLINED'> {
    return this.getRelationshipStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<'PENDING' | 'ACCEPTED' | 'DECLINED'>): 'PENDING' | 'ACCEPTED' | 'DECLINED' => r.body)
    );
  }

  /** Path part for operation `getPendingRequests()` */
  static readonly GetPendingRequestsPath = '/gametracker/v1/friendships/pending/{userId}';

  /**
   * Récupérer la liste des demandes d'amitié en attente.
   *
   * Récupérer la liste des demandes d'amitié en attente pour un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPendingRequests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingRequests$Response(params: GetPendingRequests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getPendingRequests(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer la liste des demandes d'amitié en attente.
   *
   * Récupérer la liste des demandes d'amitié en attente pour un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPendingRequests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPendingRequests(params: GetPendingRequests$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getPendingRequests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `hasPendingRequestBetween()` */
  static readonly HasPendingRequestBetweenPath = '/gametracker/v1/friendships/pending/{user1Id}/user/{user2Id}';

  /**
   * Vérifier si une demande d'amitié est en attente.
   *
   * Vérifier si une demande d'amitié est en attente entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hasPendingRequestBetween()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasPendingRequestBetween$Response(params: HasPendingRequestBetween$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return hasPendingRequestBetween(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si une demande d'amitié est en attente.
   *
   * Vérifier si une demande d'amitié est en attente entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hasPendingRequestBetween$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasPendingRequestBetween(params: HasPendingRequestBetween$Params, context?: HttpContext): Observable<boolean> {
    return this.hasPendingRequestBetween$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getMutualFriends()` */
  static readonly GetMutualFriendsPath = '/gametracker/v1/friendships/mutual/{user1Id}/user/{user2Id}';

  /**
   * Récupérer la liste d'amis communs entre deux utilisateurs.
   *
   * Récupérer la liste d'amis communs entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMutualFriends()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMutualFriends$Response(params: GetMutualFriends$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getMutualFriends(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer la liste d'amis communs entre deux utilisateurs.
   *
   * Récupérer la liste d'amis communs entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMutualFriends$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMutualFriends(params: GetMutualFriends$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getMutualFriends$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getFriendsList1()` */
  static readonly GetFriendsList1Path = '/gametracker/v1/friendships/friends/{userId}';

  /**
   * Récupérer la liste d'amis d'un utilisateur.
   *
   * Récupérer la liste d'amis d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendsList1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendsList1$Response(params: GetFriendsList1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getFriendsList1(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer la liste d'amis d'un utilisateur.
   *
   * Récupérer la liste d'amis d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendsList1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendsList1(params: GetFriendsList1$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getFriendsList1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `friendshipExists()` */
  static readonly FriendshipExistsPath = '/gametracker/v1/friendships/exists/{user1Id}/user/{user2Id}';

  /**
   * Vérifier si une amitié existe entre deux utilisateurs.
   *
   * Vérifier si une amitié existe entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `friendshipExists()` instead.
   *
   * This method doesn't expect any request body.
   */
  friendshipExists$Response(params: FriendshipExists$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return friendshipExists(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si une amitié existe entre deux utilisateurs.
   *
   * Vérifier si une amitié existe entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `friendshipExists$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  friendshipExists(params: FriendshipExists$Params, context?: HttpContext): Observable<boolean> {
    return this.friendshipExists$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getFriendCount()` */
  static readonly GetFriendCountPath = '/gametracker/v1/friendships/count/{userId}';

  /**
   * Compter le nombre d'amis d'un utilisateur.
   *
   * Compter le nombre total d'amis d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendCount$Response(params: GetFriendCount$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getFriendCount(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre d'amis d'un utilisateur.
   *
   * Compter le nombre total d'amis d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendCount(params: GetFriendCount$Params, context?: HttpContext): Observable<number> {
    return this.getFriendCount$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `searchFriendshipsByUser()` */
  static readonly SearchFriendshipsByUserPath = '/gametracker/v1/friendships/admin/search/{username}';

  /**
   * Rechercher des amitiés par nom d'utilisateur.
   *
   * Rechercher des amitiés par nom d'utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchFriendshipsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchFriendshipsByUser$Response(params: SearchFriendshipsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipDto>>> {
    return searchFriendshipsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des amitiés par nom d'utilisateur.
   *
   * Rechercher des amitiés par nom d'utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchFriendshipsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchFriendshipsByUser(params: SearchFriendshipsByUser$Params, context?: HttpContext): Observable<Array<FriendshipDto>> {
    return this.searchFriendshipsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipDto>>): Array<FriendshipDto> => r.body)
    );
  }

  /** Path part for operation `getAllFriendships()` */
  static readonly GetAllFriendshipsPath = '/gametracker/v1/friendships/admin/all';

  /**
   * Récupérer toutes les amitiés.
   *
   * Récupérer toutes les amitiés de la base de données
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFriendships()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFriendships$Response(params?: GetAllFriendships$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FriendshipDto>>> {
    return getAllFriendships(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les amitiés.
   *
   * Récupérer toutes les amitiés de la base de données
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFriendships$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFriendships(params?: GetAllFriendships$Params, context?: HttpContext): Observable<Array<FriendshipDto>> {
    return this.getAllFriendships$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FriendshipDto>>): Array<FriendshipDto> => r.body)
    );
  }

  /** Path part for operation `deleteFriendship()` */
  static readonly DeleteFriendshipPath = '/gametracker/v1/friendships/delete/{friendshipId}';

  /**
   * Supprimer une amitié.
   *
   * Supprimer une amitié entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFriendship()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFriendship$Response(params: DeleteFriendship$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFriendship(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer une amitié.
   *
   * Supprimer une amitié entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFriendship$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFriendship(params: DeleteFriendship$Params, context?: HttpContext): Observable<void> {
    return this.deleteFriendship$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `removeAllFriendshipsForUser()` */
  static readonly RemoveAllFriendshipsForUserPath = '/gametracker/v1/friendships/admin/delete/{userId}';

  /**
   * Supprimer toutes les amitiés d'un utilisateur.
   *
   * Supprimer toutes les amitiés d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeAllFriendshipsForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllFriendshipsForUser$Response(params: RemoveAllFriendshipsForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeAllFriendshipsForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer toutes les amitiés d'un utilisateur.
   *
   * Supprimer toutes les amitiés d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeAllFriendshipsForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllFriendshipsForUser(params: RemoveAllFriendshipsForUser$Params, context?: HttpContext): Observable<void> {
    return this.removeAllFriendshipsForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
