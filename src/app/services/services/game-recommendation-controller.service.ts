/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { countRecommendationsForGame } from '../fn/game-recommendation-controller/count-recommendations-for-game';
import { CountRecommendationsForGame$Params } from '../fn/game-recommendation-controller/count-recommendations-for-game';
import { countRecommendationsReceivedByUser } from '../fn/game-recommendation-controller/count-recommendations-received-by-user';
import { CountRecommendationsReceivedByUser$Params } from '../fn/game-recommendation-controller/count-recommendations-received-by-user';
import { countRecommendationsSentByUser } from '../fn/game-recommendation-controller/count-recommendations-sent-by-user';
import { CountRecommendationsSentByUser$Params } from '../fn/game-recommendation-controller/count-recommendations-sent-by-user';
import { createRecommendation } from '../fn/game-recommendation-controller/create-recommendation';
import { CreateRecommendation$Params } from '../fn/game-recommendation-controller/create-recommendation';
import { deleteRecommendation } from '../fn/game-recommendation-controller/delete-recommendation';
import { DeleteRecommendation$Params } from '../fn/game-recommendation-controller/delete-recommendation';
import { GameRecommendationDto } from '../models/game-recommendation-dto';
import { getAllRecommendations } from '../fn/game-recommendation-controller/get-all-recommendations';
import { GetAllRecommendations$Params } from '../fn/game-recommendation-controller/get-all-recommendations';
import { getMostRecommendedGames } from '../fn/game-recommendation-controller/get-most-recommended-games';
import { GetMostRecommendedGames$Params } from '../fn/game-recommendation-controller/get-most-recommended-games';
import { getRecommendationById } from '../fn/game-recommendation-controller/get-recommendation-by-id';
import { GetRecommendationById$Params } from '../fn/game-recommendation-controller/get-recommendation-by-id';
import { getRecommendationsBetweenUsers } from '../fn/game-recommendation-controller/get-recommendations-between-users';
import { GetRecommendationsBetweenUsers$Params } from '../fn/game-recommendation-controller/get-recommendations-between-users';
import { getRecommendationsByReceiver } from '../fn/game-recommendation-controller/get-recommendations-by-receiver';
import { GetRecommendationsByReceiver$Params } from '../fn/game-recommendation-controller/get-recommendations-by-receiver';
import { getRecommendationsBySender } from '../fn/game-recommendation-controller/get-recommendations-by-sender';
import { GetRecommendationsBySender$Params } from '../fn/game-recommendation-controller/get-recommendations-by-sender';
import { PageGameRecommendationDto } from '../models/page-game-recommendation-dto';
import { removeAllRecommendationsBetweenUsers } from '../fn/game-recommendation-controller/remove-all-recommendations-between-users';
import { RemoveAllRecommendationsBetweenUsers$Params } from '../fn/game-recommendation-controller/remove-all-recommendations-between-users';
import { removeAllRecommendationsForGame } from '../fn/game-recommendation-controller/remove-all-recommendations-for-game';
import { RemoveAllRecommendationsForGame$Params } from '../fn/game-recommendation-controller/remove-all-recommendations-for-game';
import { searchRecommendations } from '../fn/game-recommendation-controller/search-recommendations';
import { SearchRecommendations$Params } from '../fn/game-recommendation-controller/search-recommendations';
import { updateRecommendationMessage } from '../fn/game-recommendation-controller/update-recommendation-message';
import { UpdateRecommendationMessage$Params } from '../fn/game-recommendation-controller/update-recommendation-message';

@Injectable({ providedIn: 'root' })
export class GameRecommendationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRecommendationMessage()` */
  static readonly UpdateRecommendationMessagePath = '/gametracker/v1/recommendation/{recommendationId}/update';

  /**
   * Mettre à jour une recommendation.
   *
   * Mettre à jour une recommendation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRecommendationMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRecommendationMessage$Response(params: UpdateRecommendationMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRecommendationDto>> {
    return updateRecommendationMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour une recommendation.
   *
   * Mettre à jour une recommendation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRecommendationMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRecommendationMessage(params: UpdateRecommendationMessage$Params, context?: HttpContext): Observable<GameRecommendationDto> {
    return this.updateRecommendationMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRecommendationDto>): GameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `createRecommendation()` */
  static readonly CreateRecommendationPath = '/gametracker/v1/recommendation/create';

  /**
   * Créer une recommendation.
   *
   * Créer une recommendation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRecommendation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRecommendation$Response(params: CreateRecommendation$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRecommendationDto>> {
    return createRecommendation(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer une recommendation.
   *
   * Créer une recommendation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRecommendation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createRecommendation(params: CreateRecommendation$Params, context?: HttpContext): Observable<GameRecommendationDto> {
    return this.createRecommendation$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRecommendationDto>): GameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `getRecommendationById()` */
  static readonly GetRecommendationByIdPath = '/gametracker/v1/recommendation/{recommendationId}';

  /**
   * Récupérer une recommendation par son ID.
   *
   * Récupérer une recommendation par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecommendationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationById$Response(params: GetRecommendationById$Params, context?: HttpContext): Observable<StrictHttpResponse<GameRecommendationDto>> {
    return getRecommendationById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer une recommendation par son ID.
   *
   * Récupérer une recommendation par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecommendationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationById(params: GetRecommendationById$Params, context?: HttpContext): Observable<GameRecommendationDto> {
    return this.getRecommendationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameRecommendationDto>): GameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `deleteRecommendation()` */
  static readonly DeleteRecommendationPath = '/gametracker/v1/recommendation/{recommendationId}';

  /**
   * Supprimer une recommendation.
   *
   * Supprimer une recommendation
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRecommendation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRecommendation$Response(params: DeleteRecommendation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRecommendation(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer une recommendation.
   *
   * Supprimer une recommendation
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRecommendation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRecommendation(params: DeleteRecommendation$Params, context?: HttpContext): Observable<void> {
    return this.deleteRecommendation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getRecommendationsBetweenUsers()` */
  static readonly GetRecommendationsBetweenUsersPath = '/gametracker/v1/recommendation/users/{user1Id}/{user2Id}';

  /**
   * Récupérer les recommendations entre deux utilisateurs.
   *
   * Récupérer les recommendations entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecommendationsBetweenUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsBetweenUsers$Response(params: GetRecommendationsBetweenUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRecommendationDto>> {
    return getRecommendationsBetweenUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les recommendations entre deux utilisateurs.
   *
   * Récupérer les recommendations entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecommendationsBetweenUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsBetweenUsers(params: GetRecommendationsBetweenUsers$Params, context?: HttpContext): Observable<PageGameRecommendationDto> {
    return this.getRecommendationsBetweenUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRecommendationDto>): PageGameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `countRecommendationsSentByUser()` */
  static readonly CountRecommendationsSentByUserPath = '/gametracker/v1/recommendation/sent/{senderId}/count';

  /**
   * Compter le nombre de recommendations envoyées par un utilisateur.
   *
   * Compter le nombre de recommendations envoyées par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countRecommendationsSentByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsSentByUser$Response(params: CountRecommendationsSentByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countRecommendationsSentByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de recommendations envoyées par un utilisateur.
   *
   * Compter le nombre de recommendations envoyées par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countRecommendationsSentByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsSentByUser(params: CountRecommendationsSentByUser$Params, context?: HttpContext): Observable<number> {
    return this.countRecommendationsSentByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getRecommendationsBySender()` */
  static readonly GetRecommendationsBySenderPath = '/gametracker/v1/recommendation/sender/{senderId}';

  /**
   * Récupérer les recommendations envoyées par un utilisateur.
   *
   * Récupérer les recommendations envoyées par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecommendationsBySender()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsBySender$Response(params: GetRecommendationsBySender$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRecommendationDto>> {
    return getRecommendationsBySender(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les recommendations envoyées par un utilisateur.
   *
   * Récupérer les recommendations envoyées par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecommendationsBySender$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsBySender(params: GetRecommendationsBySender$Params, context?: HttpContext): Observable<PageGameRecommendationDto> {
    return this.getRecommendationsBySender$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRecommendationDto>): PageGameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `searchRecommendations()` */
  static readonly SearchRecommendationsPath = '/gametracker/v1/recommendation/search';

  /**
   * Rechercher des recommendations.
   *
   * Rechercher des recommendations
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchRecommendations()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchRecommendations$Response(params: SearchRecommendations$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRecommendationDto>> {
    return searchRecommendations(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des recommendations.
   *
   * Rechercher des recommendations
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchRecommendations$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchRecommendations(params: SearchRecommendations$Params, context?: HttpContext): Observable<PageGameRecommendationDto> {
    return this.searchRecommendations$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRecommendationDto>): PageGameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `getRecommendationsByReceiver()` */
  static readonly GetRecommendationsByReceiverPath = '/gametracker/v1/recommendation/receiver/{receiverId}';

  /**
   * Récupérer les recommendations reçues par un utilisateur.
   *
   * Récupérer les recommendations reçues par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecommendationsByReceiver()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsByReceiver$Response(params: GetRecommendationsByReceiver$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRecommendationDto>> {
    return getRecommendationsByReceiver(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les recommendations reçues par un utilisateur.
   *
   * Récupérer les recommendations reçues par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecommendationsByReceiver$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecommendationsByReceiver(params: GetRecommendationsByReceiver$Params, context?: HttpContext): Observable<PageGameRecommendationDto> {
    return this.getRecommendationsByReceiver$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRecommendationDto>): PageGameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `countRecommendationsReceivedByUser()` */
  static readonly CountRecommendationsReceivedByUserPath = '/gametracker/v1/recommendation/received/{receiverId}/count';

  /**
   * Compter le nombre de recommendations reçues par un utilisateur.
   *
   * Compter le nombre de recommendations reçues par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countRecommendationsReceivedByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsReceivedByUser$Response(params: CountRecommendationsReceivedByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countRecommendationsReceivedByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de recommendations reçues par un utilisateur.
   *
   * Compter le nombre de recommendations reçues par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countRecommendationsReceivedByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsReceivedByUser(params: CountRecommendationsReceivedByUser$Params, context?: HttpContext): Observable<number> {
    return this.countRecommendationsReceivedByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getMostRecommendedGames()` */
  static readonly GetMostRecommendedGamesPath = '/gametracker/v1/recommendation/mostRecommended';

  /**
   * Récupérer les jeux les plus recommandés.
   *
   * Récupérer les jeux les plus recommandés
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostRecommendedGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostRecommendedGames$Response(params: GetMostRecommendedGames$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getMostRecommendedGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux les plus recommandés.
   *
   * Récupérer les jeux les plus recommandés
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostRecommendedGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostRecommendedGames(params: GetMostRecommendedGames$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getMostRecommendedGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `countRecommendationsForGame()` */
  static readonly CountRecommendationsForGamePath = '/gametracker/v1/recommendation/game/{gameId}/count';

  /**
   * Compter le nombre de recommendations pour un jeu.
   *
   * Compter le nombre de recommendations pour un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countRecommendationsForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsForGame$Response(params: CountRecommendationsForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countRecommendationsForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Compter le nombre de recommendations pour un jeu.
   *
   * Compter le nombre de recommendations pour un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countRecommendationsForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countRecommendationsForGame(params: CountRecommendationsForGame$Params, context?: HttpContext): Observable<number> {
    return this.countRecommendationsForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllRecommendations()` */
  static readonly GetAllRecommendationsPath = '/gametracker/v1/recommendation/all';

  /**
   * Récupérer toutes les recommendations.
   *
   * Récupérer toutes les recommendations
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRecommendations()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRecommendations$Response(params: GetAllRecommendations$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameRecommendationDto>> {
    return getAllRecommendations(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer toutes les recommendations.
   *
   * Récupérer toutes les recommendations
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRecommendations$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRecommendations(params: GetAllRecommendations$Params, context?: HttpContext): Observable<PageGameRecommendationDto> {
    return this.getAllRecommendations$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameRecommendationDto>): PageGameRecommendationDto => r.body)
    );
  }

  /** Path part for operation `removeAllRecommendationsBetweenUsers()` */
  static readonly RemoveAllRecommendationsBetweenUsersPath = '/gametracker/v1/recommendation/remove/users/{user1Id}/{user2Id}';

  /**
   * Supprimer toutes les recommendations entre deux utilisateurs.
   *
   * Supprimer toutes les recommendations entre deux utilisateurs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeAllRecommendationsBetweenUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllRecommendationsBetweenUsers$Response(params: RemoveAllRecommendationsBetweenUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeAllRecommendationsBetweenUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer toutes les recommendations entre deux utilisateurs.
   *
   * Supprimer toutes les recommendations entre deux utilisateurs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeAllRecommendationsBetweenUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllRecommendationsBetweenUsers(params: RemoveAllRecommendationsBetweenUsers$Params, context?: HttpContext): Observable<void> {
    return this.removeAllRecommendationsBetweenUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `removeAllRecommendationsForGame()` */
  static readonly RemoveAllRecommendationsForGamePath = '/gametracker/v1/recommendation/remove/game/{gameId}';

  /**
   * Supprimer toutes les recommendations pour un jeu.
   *
   * Supprimer toutes les recommendations pour un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeAllRecommendationsForGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllRecommendationsForGame$Response(params: RemoveAllRecommendationsForGame$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeAllRecommendationsForGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer toutes les recommendations pour un jeu.
   *
   * Supprimer toutes les recommendations pour un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeAllRecommendationsForGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeAllRecommendationsForGame(params: RemoveAllRecommendationsForGame$Params, context?: HttpContext): Observable<void> {
    return this.removeAllRecommendationsForGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
