/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createGame } from '../fn/game-controller/create-game';
import { CreateGame$Params } from '../fn/game-controller/create-game';
import { deleteGame } from '../fn/game-controller/delete-game';
import { DeleteGame$Params } from '../fn/game-controller/delete-game';
import { filterByAgeRange } from '../fn/game-controller/filter-by-age-range';
import { FilterByAgeRange$Params } from '../fn/game-controller/filter-by-age-range';
import { filterByCategory } from '../fn/game-controller/filter-by-category';
import { FilterByCategory$Params } from '../fn/game-controller/filter-by-category';
import { filterByDifficulty } from '../fn/game-controller/filter-by-difficulty';
import { FilterByDifficulty$Params } from '../fn/game-controller/filter-by-difficulty';
import { filterByTags } from '../fn/game-controller/filter-by-tags';
import { FilterByTags$Params } from '../fn/game-controller/filter-by-tags';
import { Game } from '../models/game';
import { GameDto } from '../models/game-dto';
import { getAllGames } from '../fn/game-controller/get-all-games';
import { GetAllGames$Params } from '../fn/game-controller/get-all-games';
import { getGameById } from '../fn/game-controller/get-game-by-id';
import { GetGameById$Params } from '../fn/game-controller/get-game-by-id';
import { getGameByUrl } from '../fn/game-controller/get-game-by-url';
import { GetGameByUrl$Params } from '../fn/game-controller/get-game-by-url';
import { getGamesByCategoryAndDifficulty } from '../fn/game-controller/get-games-by-category-and-difficulty';
import { GetGamesByCategoryAndDifficulty$Params } from '../fn/game-controller/get-games-by-category-and-difficulty';
import { getGamesByIsActive } from '../fn/game-controller/get-games-by-is-active';
import { GetGamesByIsActive$Params } from '../fn/game-controller/get-games-by-is-active';
import { getGamesByMinAgeLessThanEqual } from '../fn/game-controller/get-games-by-min-age-less-than-equal';
import { GetGamesByMinAgeLessThanEqual$Params } from '../fn/game-controller/get-games-by-min-age-less-than-equal';
import { getGamesByName } from '../fn/game-controller/get-games-by-name';
import { GetGamesByName$Params } from '../fn/game-controller/get-games-by-name';
import { getGamesWithFilters } from '../fn/game-controller/get-games-with-filters';
import { GetGamesWithFilters$Params } from '../fn/game-controller/get-games-with-filters';
import { getHighlyRatedGames } from '../fn/game-controller/get-highly-rated-games';
import { GetHighlyRatedGames$Params } from '../fn/game-controller/get-highly-rated-games';
import { getMostPopularGames1 } from '../fn/game-controller/get-most-popular-games-1';
import { GetMostPopularGames1$Params } from '../fn/game-controller/get-most-popular-games-1';
import { getMostPopularGamesByCategory } from '../fn/game-controller/get-most-popular-games-by-category';
import { GetMostPopularGamesByCategory$Params } from '../fn/game-controller/get-most-popular-games-by-category';
import { getNewestGames } from '../fn/game-controller/get-newest-games';
import { GetNewestGames$Params } from '../fn/game-controller/get-newest-games';
import { PageGame } from '../models/page-game';
import { PageGameDto } from '../models/page-game-dto';
import { searchGames } from '../fn/game-controller/search-games';
import { SearchGames$Params } from '../fn/game-controller/search-games';
import { updateGame } from '../fn/game-controller/update-game';
import { UpdateGame$Params } from '../fn/game-controller/update-game';

@Injectable({ providedIn: 'root' })
export class GameControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateGame()` */
  static readonly UpdateGamePath = '/gametracker/v1/game/{gameId}/update';

  /**
   * Mettre à jour un jeu.
   *
   * Mettre à jour un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateGame()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGame$Response(params: UpdateGame$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return updateGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Mettre à jour un jeu.
   *
   * Mettre à jour un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateGame$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGame(params: UpdateGame$Params, context?: HttpContext): Observable<GameDto> {
    return this.updateGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

  /** Path part for operation `createGame()` */
  static readonly CreateGamePath = '/gametracker/v1/game/create';

  /**
   * Créer un jeu.
   *
   * Créer un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createGame()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGame$Response(params: CreateGame$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return createGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Créer un jeu.
   *
   * Créer un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createGame$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createGame(params: CreateGame$Params, context?: HttpContext): Observable<GameDto> {
    return this.createGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

  /** Path part for operation `getGamesByName()` */
  static readonly GetGamesByNamePath = '/gametracker/v1/game/{name}';

  /**
   * Récupérer des jeux par nom.
   *
   * Récupérer des jeux par nom
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGamesByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByName$Response(params: GetGamesByName$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getGamesByName(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux par nom.
   *
   * Récupérer des jeux par nom
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGamesByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByName(params: GetGamesByName$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getGamesByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `filterByAgeRange()` */
  static readonly FilterByAgeRangePath = '/gametracker/v1/game/{minAge}-{maxAge} ans';

  /**
   * Filtrer les jeux par tranche d'âge.
   *
   * Filtrer les jeux par tranche d'âge
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filterByAgeRange()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByAgeRange$Response(params: FilterByAgeRange$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return filterByAgeRange(this.http, this.rootUrl, params, context);
  }

  /**
   * Filtrer les jeux par tranche d'âge.
   *
   * Filtrer les jeux par tranche d'âge
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filterByAgeRange$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByAgeRange(params: FilterByAgeRange$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.filterByAgeRange$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `getGameById()` */
  static readonly GetGameByIdPath = '/gametracker/v1/game/{gameId}';

  /**
   * Récupérer un jeu par son ID.
   *
   * Récupérer un jeu par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGameById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameById$Response(params: GetGameById$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return getGameById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un jeu par son ID.
   *
   * Récupérer un jeu par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGameById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameById(params: GetGameById$Params, context?: HttpContext): Observable<GameDto> {
    return this.getGameById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

  /** Path part for operation `deleteGame()` */
  static readonly DeleteGamePath = '/gametracker/v1/game/{gameId}';

  /**
   * Supprimer un jeu.
   *
   * Supprimer un jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGame()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGame$Response(params: DeleteGame$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteGame(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un jeu.
   *
   * Supprimer un jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGame$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGame(params: DeleteGame$Params, context?: HttpContext): Observable<void> {
    return this.deleteGame$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `filterByDifficulty()` */
  static readonly FilterByDifficultyPath = '/gametracker/v1/game/{difficulty}';

  /**
   * Filtrer les jeux par niveau de difficulté.
   *
   * Filtrer les jeux par niveau de difficulté
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filterByDifficulty()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByDifficulty$Response(params: FilterByDifficulty$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return filterByDifficulty(this.http, this.rootUrl, params, context);
  }

  /**
   * Filtrer les jeux par niveau de difficulté.
   *
   * Filtrer les jeux par niveau de difficulté
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filterByDifficulty$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByDifficulty(params: FilterByDifficulty$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.filterByDifficulty$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `filterByCategory()` */
  static readonly FilterByCategoryPath = '/gametracker/v1/game/{category}';

  /**
   * Filtrer les jeux par catégorie.
   *
   * Filtrer les jeux par catégorie
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filterByCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByCategory$Response(params: FilterByCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return filterByCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * Filtrer les jeux par catégorie.
   *
   * Filtrer les jeux par catégorie
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filterByCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filterByCategory(params: FilterByCategory$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.filterByCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `getGameByUrl()` */
  static readonly GetGameByUrlPath = '/gametracker/v1/game/url/{url}';

  /**
   * Récupérer un jeu par son URL.
   *
   * Récupérer un jeu par son URL
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGameByUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameByUrl$Response(params: GetGameByUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<Game>> {
    return getGameByUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un jeu par son URL.
   *
   * Récupérer un jeu par son URL
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGameByUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGameByUrl(params: GetGameByUrl$Params, context?: HttpContext): Observable<Game> {
    return this.getGameByUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<Game>): Game => r.body)
    );
  }

  /** Path part for operation `filterByTags()` */
  static readonly FilterByTagsPath = '/gametracker/v1/game/tags';

  /**
   * Filtrer les jeux par tags.
   *
   * Filtrer les jeux par tags
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filterByTags()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  filterByTags$Response(params: FilterByTags$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return filterByTags(this.http, this.rootUrl, params, context);
  }

  /**
   * Filtrer les jeux par tags.
   *
   * Filtrer les jeux par tags
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filterByTags$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  filterByTags(params: FilterByTags$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.filterByTags$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `searchGames()` */
  static readonly SearchGamesPath = '/gametracker/v1/game/search/{query}';

  /**
   * Rechercher des jeux par nom.
   *
   * Rechercher des jeux par nom
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchGames$Response(params: SearchGames$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return searchGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Rechercher des jeux par nom.
   *
   * Rechercher des jeux par nom
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchGames(params: SearchGames$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.searchGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `getHighlyRatedGames()` */
  static readonly GetHighlyRatedGamesPath = '/gametracker/v1/game/rating';

  /**
   * Récupérer des jeux par note.
   *
   * Récupérer des jeux par note
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHighlyRatedGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHighlyRatedGames$Response(params: GetHighlyRatedGames$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getHighlyRatedGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux par note.
   *
   * Récupérer des jeux par note
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHighlyRatedGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHighlyRatedGames(params: GetHighlyRatedGames$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getHighlyRatedGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `getMostPopularGames1()` */
  static readonly GetMostPopularGames1Path = '/gametracker/v1/game/popular';

  /**
   * Récupérer les jeux les plus populaires.
   *
   * Récupérer les jeux les plus populaires
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostPopularGames1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularGames1$Response(params: GetMostPopularGames1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getMostPopularGames1(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux les plus populaires.
   *
   * Récupérer les jeux les plus populaires
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostPopularGames1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularGames1(params: GetMostPopularGames1$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getMostPopularGames1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `getMostPopularGamesByCategory()` */
  static readonly GetMostPopularGamesByCategoryPath = '/gametracker/v1/game/popular/category';

  /**
   * Récupérer les jeux populaires par catégorie.
   *
   * Récupérer les jeux populaires par catégorie
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostPopularGamesByCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularGamesByCategory$Response(params: GetMostPopularGamesByCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getMostPopularGamesByCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux populaires par catégorie.
   *
   * Récupérer les jeux populaires par catégorie
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostPopularGamesByCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostPopularGamesByCategory(params: GetMostPopularGamesByCategory$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getMostPopularGamesByCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `getNewestGames()` */
  static readonly GetNewestGamesPath = '/gametracker/v1/game/newest';

  /**
   * Récupérer les jeux les plus récents.
   *
   * Récupérer les jeux les plus récents
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNewestGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNewestGames$Response(params: GetNewestGames$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getNewestGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les jeux les plus récents.
   *
   * Récupérer les jeux les plus récents
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNewestGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNewestGames(params: GetNewestGames$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getNewestGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `getGamesWithFilters()` */
  static readonly GetGamesWithFiltersPath = '/gametracker/v1/game/filters';

  /**
   * Récupérer des jeux avec plusieurs filtres.
   *
   * Récupérer des jeux avec plusieurs filtres
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGamesWithFilters()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesWithFilters$Response(params: GetGamesWithFilters$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGame>> {
    return getGamesWithFilters(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux avec plusieurs filtres.
   *
   * Récupérer des jeux avec plusieurs filtres
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGamesWithFilters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesWithFilters(params: GetGamesWithFilters$Params, context?: HttpContext): Observable<PageGame> {
    return this.getGamesWithFilters$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGame>): PageGame => r.body)
    );
  }

  /** Path part for operation `getGamesByCategoryAndDifficulty()` */
  static readonly GetGamesByCategoryAndDifficultyPath = '/gametracker/v1/game/category/difficulty';

  /**
   * Récupérer des jeux par catégorie et niveau de difficulté.
   *
   * Récupérer des jeux par catégorie et niveau de difficulté
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGamesByCategoryAndDifficulty()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByCategoryAndDifficulty$Response(params: GetGamesByCategoryAndDifficulty$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getGamesByCategoryAndDifficulty(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux par catégorie et niveau de difficulté.
   *
   * Récupérer des jeux par catégorie et niveau de difficulté
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGamesByCategoryAndDifficulty$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByCategoryAndDifficulty(params: GetGamesByCategoryAndDifficulty$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getGamesByCategoryAndDifficulty$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

  /** Path part for operation `getAllGames()` */
  static readonly GetAllGamesPath = '/gametracker/v1/game/all';

  /**
   * Récupérer tous les jeux.
   *
   * Récupérer tous les jeux
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllGames()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGames$Response(params: GetAllGames$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGameDto>> {
    return getAllGames(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer tous les jeux.
   *
   * Récupérer tous les jeux
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllGames$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGames(params: GetAllGames$Params, context?: HttpContext): Observable<PageGameDto> {
    return this.getAllGames$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGameDto>): PageGameDto => r.body)
    );
  }

  /** Path part for operation `getGamesByIsActive()` */
  static readonly GetGamesByIsActivePath = '/gametracker/v1/game/active';

  /**
   * Récupérer des jeux actifs.
   *
   * Récupérer des jeux actifs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGamesByIsActive()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByIsActive$Response(params: GetGamesByIsActive$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGame>> {
    return getGamesByIsActive(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux actifs.
   *
   * Récupérer des jeux actifs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGamesByIsActive$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByIsActive(params: GetGamesByIsActive$Params, context?: HttpContext): Observable<PageGame> {
    return this.getGamesByIsActive$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGame>): PageGame => r.body)
    );
  }

  /** Path part for operation `getGamesByMinAgeLessThanEqual()` */
  static readonly GetGamesByMinAgeLessThanEqualPath = '/gametracker/v1/game/<={age} ans';

  /**
   * Récupérer des jeux accessibles pour un âge donné.
   *
   * Récupérer des jeux accessibles pour un âge donné
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGamesByMinAgeLessThanEqual()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByMinAgeLessThanEqual$Response(params: GetGamesByMinAgeLessThanEqual$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Game>>> {
    return getGamesByMinAgeLessThanEqual(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer des jeux accessibles pour un âge donné.
   *
   * Récupérer des jeux accessibles pour un âge donné
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGamesByMinAgeLessThanEqual$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGamesByMinAgeLessThanEqual(params: GetGamesByMinAgeLessThanEqual$Params, context?: HttpContext): Observable<Array<Game>> {
    return this.getGamesByMinAgeLessThanEqual$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Game>>): Array<Game> => r.body)
    );
  }

}
