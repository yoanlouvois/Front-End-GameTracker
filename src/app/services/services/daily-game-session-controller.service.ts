/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { calculateAveragePlaytimeByUser } from '../fn/daily-game-session-controller/calculate-average-playtime-by-user';
import { CalculateAveragePlaytimeByUser$Params } from '../fn/daily-game-session-controller/calculate-average-playtime-by-user';
import { calculatePlaytimeByUserInPeriod } from '../fn/daily-game-session-controller/calculate-playtime-by-user-in-period';
import { CalculatePlaytimeByUserInPeriod$Params } from '../fn/daily-game-session-controller/calculate-playtime-by-user-in-period';
import { calculateTotalPlaytimeByUser } from '../fn/daily-game-session-controller/calculate-total-playtime-by-user';
import { CalculateTotalPlaytimeByUser$Params } from '../fn/daily-game-session-controller/calculate-total-playtime-by-user';
import { countGamesPlayedByUser } from '../fn/daily-game-session-controller/count-games-played-by-user';
import { CountGamesPlayedByUser$Params } from '../fn/daily-game-session-controller/count-games-played-by-user';
import { countSessionsByUser } from '../fn/daily-game-session-controller/count-sessions-by-user';
import { CountSessionsByUser$Params } from '../fn/daily-game-session-controller/count-sessions-by-user';
import { createSession } from '../fn/daily-game-session-controller/create-session';
import { CreateSession$Params } from '../fn/daily-game-session-controller/create-session';
import { DailyGameSessionDto } from '../models/daily-game-session-dto';
import { deleteSession } from '../fn/daily-game-session-controller/delete-session';
import { DeleteSession$Params } from '../fn/daily-game-session-controller/delete-session';
import { getLastPlayedDate } from '../fn/daily-game-session-controller/get-last-played-date';
import { GetLastPlayedDate$Params } from '../fn/daily-game-session-controller/get-last-played-date';
import { getLongestSessionForUser } from '../fn/daily-game-session-controller/get-longest-session-for-user';
import { GetLongestSessionForUser$Params } from '../fn/daily-game-session-controller/get-longest-session-for-user';
import { getMostActiveUsers } from '../fn/daily-game-session-controller/get-most-active-users';
import { GetMostActiveUsers$Params } from '../fn/daily-game-session-controller/get-most-active-users';
import { getRecentSessionsForUser } from '../fn/daily-game-session-controller/get-recent-sessions-for-user';
import { GetRecentSessionsForUser$Params } from '../fn/daily-game-session-controller/get-recent-sessions-for-user';
import { getSessionByDate } from '../fn/daily-game-session-controller/get-session-by-date';
import { GetSessionByDate$Params } from '../fn/daily-game-session-controller/get-session-by-date';
import { getSessionById } from '../fn/daily-game-session-controller/get-session-by-id';
import { GetSessionById$Params } from '../fn/daily-game-session-controller/get-session-by-id';
import { getSessionByUserAndDate } from '../fn/daily-game-session-controller/get-session-by-user-and-date';
import { GetSessionByUserAndDate$Params } from '../fn/daily-game-session-controller/get-session-by-user-and-date';
import { getSessionsForUser } from '../fn/daily-game-session-controller/get-sessions-for-user';
import { GetSessionsForUser$Params } from '../fn/daily-game-session-controller/get-sessions-for-user';
import { getSessionsForUserBetweenDates } from '../fn/daily-game-session-controller/get-sessions-for-user-between-dates';
import { GetSessionsForUserBetweenDates$Params } from '../fn/daily-game-session-controller/get-sessions-for-user-between-dates';
import { updateSession } from '../fn/daily-game-session-controller/update-session';
import { UpdateSession$Params } from '../fn/daily-game-session-controller/update-session';

@Injectable({ providedIn: 'root' })
export class DailyGameSessionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSession()` */
  static readonly UpdateSessionPath = '/gametracker/v1/sessions/update/{idSession}';

  /**
   * Met à jour une session de jeu.
   *
   * Met à jour une session de jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession$Response(params: UpdateSession$Params, context?: HttpContext): Observable<StrictHttpResponse<DailyGameSessionDto>> {
    return updateSession(this.http, this.rootUrl, params, context);
  }

  /**
   * Met à jour une session de jeu.
   *
   * Met à jour une session de jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSession(params: UpdateSession$Params, context?: HttpContext): Observable<DailyGameSessionDto> {
    return this.updateSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<DailyGameSessionDto>): DailyGameSessionDto => r.body)
    );
  }

  /** Path part for operation `createSession()` */
  static readonly CreateSessionPath = '/gametracker/v1/sessions/create';

  /**
   * Crée une nouvelle session de jeu.
   *
   * Crée une nouvelle session de jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSession()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSession$Response(params: CreateSession$Params, context?: HttpContext): Observable<StrictHttpResponse<DailyGameSessionDto>> {
    return createSession(this.http, this.rootUrl, params, context);
  }

  /**
   * Crée une nouvelle session de jeu.
   *
   * Crée une nouvelle session de jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSession$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createSession(params: CreateSession$Params, context?: HttpContext): Observable<DailyGameSessionDto> {
    return this.createSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<DailyGameSessionDto>): DailyGameSessionDto => r.body)
    );
  }

  /** Path part for operation `getSessionById()` */
  static readonly GetSessionByIdPath = '/gametracker/v1/sessions/{idSession}';

  /**
   * Renvoie une session de jeu par son ID.
   *
   * Renvoie une session de jeu par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionById$Response(params: GetSessionById$Params, context?: HttpContext): Observable<StrictHttpResponse<DailyGameSessionDto>> {
    return getSessionById(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie une session de jeu par son ID.
   *
   * Renvoie une session de jeu par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionById(params: GetSessionById$Params, context?: HttpContext): Observable<DailyGameSessionDto> {
    return this.getSessionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DailyGameSessionDto>): DailyGameSessionDto => r.body)
    );
  }

  /** Path part for operation `getSessionsForUser()` */
  static readonly GetSessionsForUserPath = '/gametracker/v1/sessions/user/{user}';

  /**
   * Renvoie toutes les sessions de jeu d'un utilisateur.
   *
   * Renvoie toutes les sessions de jeu d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionsForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionsForUser$Response(params: GetSessionsForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyGameSessionDto>>> {
    return getSessionsForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie toutes les sessions de jeu d'un utilisateur.
   *
   * Renvoie toutes les sessions de jeu d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionsForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionsForUser(params: GetSessionsForUser$Params, context?: HttpContext): Observable<Array<DailyGameSessionDto>> {
    return this.getSessionsForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyGameSessionDto>>): Array<DailyGameSessionDto> => r.body)
    );
  }

  /** Path part for operation `getSessionByUserAndDate()` */
  static readonly GetSessionByUserAndDatePath = '/gametracker/v1/sessions/user/{user}/date/{date}';

  /**
   * Renvoie une session de jeu par utilisateur et date.
   *
   * Renvoie une session de jeu par utilisateur et date
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionByUserAndDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionByUserAndDate$Response(params: GetSessionByUserAndDate$Params, context?: HttpContext): Observable<StrictHttpResponse<DailyGameSessionDto>> {
    return getSessionByUserAndDate(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie une session de jeu par utilisateur et date.
   *
   * Renvoie une session de jeu par utilisateur et date
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionByUserAndDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionByUserAndDate(params: GetSessionByUserAndDate$Params, context?: HttpContext): Observable<DailyGameSessionDto> {
    return this.getSessionByUserAndDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<DailyGameSessionDto>): DailyGameSessionDto => r.body)
    );
  }

  /** Path part for operation `getLastPlayedDate()` */
  static readonly GetLastPlayedDatePath = '/gametracker/v1/sessions/user/{userId}/last';

  /**
   * Renvoie la dernière session de jeu d'un utilisateur.
   *
   * Renvoie la dernière session de jeu d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLastPlayedDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastPlayedDate$Response(params: GetLastPlayedDate$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getLastPlayedDate(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la dernière session de jeu d'un utilisateur.
   *
   * Renvoie la dernière session de jeu d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLastPlayedDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLastPlayedDate(params: GetLastPlayedDate$Params, context?: HttpContext): Observable<string> {
    return this.getLastPlayedDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getSessionsForUserBetweenDates()` */
  static readonly GetSessionsForUserBetweenDatesPath = '/gametracker/v1/sessions/user/{userId}/between/{start}/{end}';

  /**
   * Renvoie toutes les sessions de jeu d'un utilisateur entre deux dates.
   *
   * Renvoie toutes les sessions de jeu d'un utilisateur entre deux dates
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionsForUserBetweenDates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionsForUserBetweenDates$Response(params: GetSessionsForUserBetweenDates$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyGameSessionDto>>> {
    return getSessionsForUserBetweenDates(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie toutes les sessions de jeu d'un utilisateur entre deux dates.
   *
   * Renvoie toutes les sessions de jeu d'un utilisateur entre deux dates
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionsForUserBetweenDates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionsForUserBetweenDates(params: GetSessionsForUserBetweenDates$Params, context?: HttpContext): Observable<Array<DailyGameSessionDto>> {
    return this.getSessionsForUserBetweenDates$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyGameSessionDto>>): Array<DailyGameSessionDto> => r.body)
    );
  }

  /** Path part for operation `calculateTotalPlaytimeByUser()` */
  static readonly CalculateTotalPlaytimeByUserPath = '/gametracker/v1/sessions/total-playtime/{user}';

  /**
   * Renvoie le temps de jeu total d'un utilisateur.
   *
   * Renvoie le temps de jeu total d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateTotalPlaytimeByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateTotalPlaytimeByUser$Response(params: CalculateTotalPlaytimeByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return calculateTotalPlaytimeByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le temps de jeu total d'un utilisateur.
   *
   * Renvoie le temps de jeu total d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateTotalPlaytimeByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateTotalPlaytimeByUser(params: CalculateTotalPlaytimeByUser$Params, context?: HttpContext): Observable<number> {
    return this.calculateTotalPlaytimeByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getRecentSessionsForUser()` */
  static readonly GetRecentSessionsForUserPath = '/gametracker/v1/sessions/recent/{user}/{limit}';

  /**
   * Renvoie les sessions de jeu récentes d'un utilisateur.
   *
   * Renvoie les sessions de jeu récentes d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentSessionsForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentSessionsForUser$Response(params: GetRecentSessionsForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyGameSessionDto>>> {
    return getRecentSessionsForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie les sessions de jeu récentes d'un utilisateur.
   *
   * Renvoie les sessions de jeu récentes d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentSessionsForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentSessionsForUser(params: GetRecentSessionsForUser$Params, context?: HttpContext): Observable<Array<DailyGameSessionDto>> {
    return this.getRecentSessionsForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyGameSessionDto>>): Array<DailyGameSessionDto> => r.body)
    );
  }

  /** Path part for operation `calculatePlaytimeByUserInPeriod()` */
  static readonly CalculatePlaytimeByUserInPeriodPath = '/gametracker/v1/sessions/playtime/{user}/between/{start}/{end}';

  /**
   * Renvoie le temps de jeu d'un utilisateur entre deux dates.
   *
   * Renvoie le temps de jeu d'un utilisateur entre deux dates
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculatePlaytimeByUserInPeriod()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculatePlaytimeByUserInPeriod$Response(params: CalculatePlaytimeByUserInPeriod$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return calculatePlaytimeByUserInPeriod(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le temps de jeu d'un utilisateur entre deux dates.
   *
   * Renvoie le temps de jeu d'un utilisateur entre deux dates
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculatePlaytimeByUserInPeriod$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculatePlaytimeByUserInPeriod(params: CalculatePlaytimeByUserInPeriod$Params, context?: HttpContext): Observable<number> {
    return this.calculatePlaytimeByUserInPeriod$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getMostActiveUsers()` */
  static readonly GetMostActiveUsersPath = '/gametracker/v1/sessions/most-active-users';

  /**
   * Renvoie les utilisateurs les plus actifs.
   *
   * Renvoie les utilisateurs les plus actifs
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMostActiveUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostActiveUsers$Response(params?: GetMostActiveUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return getMostActiveUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie les utilisateurs les plus actifs.
   *
   * Renvoie les utilisateurs les plus actifs
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMostActiveUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMostActiveUsers(params?: GetMostActiveUsers$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.getMostActiveUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `getLongestSessionForUser()` */
  static readonly GetLongestSessionForUserPath = '/gametracker/v1/sessions/longest/{user}';

  /**
   * Renvoie la session de jeu la plus longue d'un utilisateur.
   *
   * Renvoie la session de jeu la plus longue d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLongestSessionForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLongestSessionForUser$Response(params: GetLongestSessionForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<DailyGameSessionDto>> {
    return getLongestSessionForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie la session de jeu la plus longue d'un utilisateur.
   *
   * Renvoie la session de jeu la plus longue d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLongestSessionForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLongestSessionForUser(params: GetLongestSessionForUser$Params, context?: HttpContext): Observable<DailyGameSessionDto> {
    return this.getLongestSessionForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<DailyGameSessionDto>): DailyGameSessionDto => r.body)
    );
  }

  /** Path part for operation `countGamesPlayedByUser()` */
  static readonly CountGamesPlayedByUserPath = '/gametracker/v1/sessions/games-played/{user}';

  /**
   * Renvoie le nombre de jeux joués par un utilisateur.
   *
   * Renvoie le nombre de jeux joués par un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countGamesPlayedByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countGamesPlayedByUser$Response(params: CountGamesPlayedByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countGamesPlayedByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le nombre de jeux joués par un utilisateur.
   *
   * Renvoie le nombre de jeux joués par un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countGamesPlayedByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countGamesPlayedByUser(params: CountGamesPlayedByUser$Params, context?: HttpContext): Observable<number> {
    return this.countGamesPlayedByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getSessionByDate()` */
  static readonly GetSessionByDatePath = '/gametracker/v1/sessions/date/{date}';

  /**
   * Renvoie toutes les sessions de jeu d'une date.
   *
   * Renvoie toutes les sessions de jeu d'une date
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSessionByDate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionByDate$Response(params: GetSessionByDate$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DailyGameSessionDto>>> {
    return getSessionByDate(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie toutes les sessions de jeu d'une date.
   *
   * Renvoie toutes les sessions de jeu d'une date
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSessionByDate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSessionByDate(params: GetSessionByDate$Params, context?: HttpContext): Observable<Array<DailyGameSessionDto>> {
    return this.getSessionByDate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DailyGameSessionDto>>): Array<DailyGameSessionDto> => r.body)
    );
  }

  /** Path part for operation `countSessionsByUser()` */
  static readonly CountSessionsByUserPath = '/gametracker/v1/sessions/count/{user}';

  /**
   * Renvoie le nombre de sessions d'un utilisateur.
   *
   * Renvoie le nombre de sessions d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countSessionsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  countSessionsByUser$Response(params: CountSessionsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countSessionsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le nombre de sessions d'un utilisateur.
   *
   * Renvoie le nombre de sessions d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countSessionsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countSessionsByUser(params: CountSessionsByUser$Params, context?: HttpContext): Observable<number> {
    return this.countSessionsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `calculateAveragePlaytimeByUser()` */
  static readonly CalculateAveragePlaytimeByUserPath = '/gametracker/v1/sessions/average-playtime/{user}';

  /**
   * Renvoie le temps de jeu moyen d'un utilisateur.
   *
   * Renvoie le temps de jeu moyen d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateAveragePlaytimeByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAveragePlaytimeByUser$Response(params: CalculateAveragePlaytimeByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return calculateAveragePlaytimeByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Renvoie le temps de jeu moyen d'un utilisateur.
   *
   * Renvoie le temps de jeu moyen d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateAveragePlaytimeByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateAveragePlaytimeByUser(params: CalculateAveragePlaytimeByUser$Params, context?: HttpContext): Observable<number> {
    return this.calculateAveragePlaytimeByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteSession()` */
  static readonly DeleteSessionPath = '/gametracker/v1/sessions/delete/{idSession}';

  /**
   * Supprime une session de jeu.
   *
   * Supprime une session de jeu
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSession()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession$Response(params: DeleteSession$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSession(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprime une session de jeu.
   *
   * Supprime une session de jeu
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSession$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSession(params: DeleteSession$Params, context?: HttpContext): Observable<void> {
    return this.deleteSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
