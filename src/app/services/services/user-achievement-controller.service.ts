/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUserAchievement } from '../fn/user-achievement-controller/delete-user-achievement';
import { DeleteUserAchievement$Params } from '../fn/user-achievement-controller/delete-user-achievement';
import { getAchievementProgress } from '../fn/user-achievement-controller/get-achievement-progress';
import { GetAchievementProgress$Params } from '../fn/user-achievement-controller/get-achievement-progress';
import { getAchievementsByUser } from '../fn/user-achievement-controller/get-achievements-by-user';
import { GetAchievementsByUser$Params } from '../fn/user-achievement-controller/get-achievements-by-user';
import { getGlobalUnlockRate } from '../fn/user-achievement-controller/get-global-unlock-rate';
import { GetGlobalUnlockRate$Params } from '../fn/user-achievement-controller/get-global-unlock-rate';
import { getRecentUnlocks } from '../fn/user-achievement-controller/get-recent-unlocks';
import { GetRecentUnlocks$Params } from '../fn/user-achievement-controller/get-recent-unlocks';
import { getTotalAchievementPoints } from '../fn/user-achievement-controller/get-total-achievement-points';
import { GetTotalAchievementPoints$Params } from '../fn/user-achievement-controller/get-total-achievement-points';
import { getUserAchievementById } from '../fn/user-achievement-controller/get-user-achievement-by-id';
import { GetUserAchievementById$Params } from '../fn/user-achievement-controller/get-user-achievement-by-id';
import { hasAchievement } from '../fn/user-achievement-controller/has-achievement';
import { HasAchievement$Params } from '../fn/user-achievement-controller/has-achievement';
import { hasAllPrerequisites } from '../fn/user-achievement-controller/has-all-prerequisites';
import { HasAllPrerequisites$Params } from '../fn/user-achievement-controller/has-all-prerequisites';
import { PageUserAchievementDto } from '../models/page-user-achievement-dto';
import { unlockAchievement } from '../fn/user-achievement-controller/unlock-achievement';
import { UnlockAchievement$Params } from '../fn/user-achievement-controller/unlock-achievement';
import { UserAchievementDto } from '../models/user-achievement-dto';

@Injectable({ providedIn: 'root' })
export class UserAchievementControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `unlockAchievement()` */
  static readonly UnlockAchievementPath = '/gametracker/v1/userAchievements/unlock';

  /**
   * Débloquer un achievement.
   *
   * Débloquer un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unlockAchievement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unlockAchievement$Response(params: UnlockAchievement$Params, context?: HttpContext): Observable<StrictHttpResponse<UserAchievementDto>> {
    return unlockAchievement(this.http, this.rootUrl, params, context);
  }

  /**
   * Débloquer un achievement.
   *
   * Débloquer un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unlockAchievement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unlockAchievement(params: UnlockAchievement$Params, context?: HttpContext): Observable<UserAchievementDto> {
    return this.unlockAchievement$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserAchievementDto>): UserAchievementDto => r.body)
    );
  }

  /** Path part for operation `getUserAchievementById()` */
  static readonly GetUserAchievementByIdPath = '/gametracker/v1/userAchievements/{userAchievementId}';

  /**
   * Récupérer un achievement par son ID.
   *
   * Récupérer un achievement par son ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserAchievementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAchievementById$Response(params: GetUserAchievementById$Params, context?: HttpContext): Observable<StrictHttpResponse<UserAchievementDto>> {
    return getUserAchievementById(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer un achievement par son ID.
   *
   * Récupérer un achievement par son ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserAchievementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAchievementById(params: GetUserAchievementById$Params, context?: HttpContext): Observable<UserAchievementDto> {
    return this.getUserAchievementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserAchievementDto>): UserAchievementDto => r.body)
    );
  }

  /** Path part for operation `getAchievementsByUser()` */
  static readonly GetAchievementsByUserPath = '/gametracker/v1/userAchievements/user/{userId}';

  /**
   * Récupérer les achievements d'un utilisateur.
   *
   * Récupérer les achievements d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByUser$Response(params: GetAchievementsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageUserAchievementDto>> {
    return getAchievementsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les achievements d'un utilisateur.
   *
   * Récupérer les achievements d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementsByUser(params: GetAchievementsByUser$Params, context?: HttpContext): Observable<PageUserAchievementDto> {
    return this.getAchievementsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageUserAchievementDto>): PageUserAchievementDto => r.body)
    );
  }

  /** Path part for operation `hasAchievement()` */
  static readonly HasAchievementPath = '/gametracker/v1/userAchievements/unlocked/{userId}/{achievementId}';

  /**
   * Vérifier si un achievement est débloqué.
   *
   * Vérifier si un achievement est débloqué
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hasAchievement()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasAchievement$Response(params: HasAchievement$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return hasAchievement(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un achievement est débloqué.
   *
   * Vérifier si un achievement est débloqué
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hasAchievement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasAchievement(params: HasAchievement$Params, context?: HttpContext): Observable<boolean> {
    return this.hasAchievement$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getGlobalUnlockRate()` */
  static readonly GetGlobalUnlockRatePath = '/gametracker/v1/userAchievements/unlockRate/{achievementId}';

  /**
   * Récupérer le taux de déblocage d'un achievement.
   *
   * Récupérer le taux de déblocage d'un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGlobalUnlockRate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGlobalUnlockRate$Response(params: GetGlobalUnlockRate$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getGlobalUnlockRate(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le taux de déblocage d'un achievement.
   *
   * Récupérer le taux de déblocage d'un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGlobalUnlockRate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGlobalUnlockRate(params: GetGlobalUnlockRate$Params, context?: HttpContext): Observable<number> {
    return this.getGlobalUnlockRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getRecentUnlocks()` */
  static readonly GetRecentUnlocksPath = '/gametracker/v1/userAchievements/recent/{userId}/{days}';

  /**
   * Récupérer les achievements débloqués récemment.
   *
   * Récupérer les achievements débloqués récemment
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecentUnlocks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentUnlocks$Response(params: GetRecentUnlocks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserAchievementDto>>> {
    return getRecentUnlocks(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer les achievements débloqués récemment.
   *
   * Récupérer les achievements débloqués récemment
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecentUnlocks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecentUnlocks(params: GetRecentUnlocks$Params, context?: HttpContext): Observable<Array<UserAchievementDto>> {
    return this.getRecentUnlocks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserAchievementDto>>): Array<UserAchievementDto> => r.body)
    );
  }

  /** Path part for operation `getAchievementProgress()` */
  static readonly GetAchievementProgressPath = '/gametracker/v1/userAchievements/progress/{userId}';

  /**
   * Récupérer la progression des achievements d'un utilisateur.
   *
   * Récupérer la progression des achievements d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAchievementProgress()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementProgress$Response(params: GetAchievementProgress$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: boolean;
}>> {
    return getAchievementProgress(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer la progression des achievements d'un utilisateur.
   *
   * Récupérer la progression des achievements d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAchievementProgress$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAchievementProgress(params: GetAchievementProgress$Params, context?: HttpContext): Observable<{
[key: string]: boolean;
}> {
    return this.getAchievementProgress$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: boolean;
}>): {
[key: string]: boolean;
} => r.body)
    );
  }

  /** Path part for operation `hasAllPrerequisites()` */
  static readonly HasAllPrerequisitesPath = '/gametracker/v1/userAchievements/prerequisites/{userId}/{achievementId}';

  /**
   * Vérifier si un utilisateur a tous les prérequis pour débloquer un achievement.
   *
   * Vérifier si un utilisateur a tous les prérequis pour débloquer un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hasAllPrerequisites()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasAllPrerequisites$Response(params: HasAllPrerequisites$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return hasAllPrerequisites(this.http, this.rootUrl, params, context);
  }

  /**
   * Vérifier si un utilisateur a tous les prérequis pour débloquer un achievement.
   *
   * Vérifier si un utilisateur a tous les prérequis pour débloquer un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hasAllPrerequisites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hasAllPrerequisites(params: HasAllPrerequisites$Params, context?: HttpContext): Observable<boolean> {
    return this.hasAllPrerequisites$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getTotalAchievementPoints()` */
  static readonly GetTotalAchievementPointsPath = '/gametracker/v1/userAchievements/points/{userId}';

  /**
   * Récupérer le nombre total de points d'achievement d'un utilisateur.
   *
   * Récupérer le nombre total de points d'achievement d'un utilisateur
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalAchievementPoints()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalAchievementPoints$Response(params: GetTotalAchievementPoints$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalAchievementPoints(this.http, this.rootUrl, params, context);
  }

  /**
   * Récupérer le nombre total de points d'achievement d'un utilisateur.
   *
   * Récupérer le nombre total de points d'achievement d'un utilisateur
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalAchievementPoints$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalAchievementPoints(params: GetTotalAchievementPoints$Params, context?: HttpContext): Observable<number> {
    return this.getTotalAchievementPoints$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteUserAchievement()` */
  static readonly DeleteUserAchievementPath = '/gametracker/v1/userAchievements/delete/{userAchievementId}';

  /**
   * Supprimer un achievement.
   *
   * Supprimer un achievement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserAchievement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserAchievement$Response(params: DeleteUserAchievement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUserAchievement(this.http, this.rootUrl, params, context);
  }

  /**
   * Supprimer un achievement.
   *
   * Supprimer un achievement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserAchievement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserAchievement(params: DeleteUserAchievement$Params, context?: HttpContext): Observable<void> {
    return this.deleteUserAchievement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
